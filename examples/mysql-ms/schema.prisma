generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ActivityEvent {
  id               String         @id @default(cuid()) @db.Char(30)
  type             String         @db.MediumText
  ownerId          String         @db.MediumText
  ownerType        String         @db.MediumText
  relatedId        String?        @db.MediumText
  relatedType      String?        @db.MediumText
  relatedText      String?        @db.MediumText
  showRelatedImage Boolean?
  createdAt        DateTime       @default(now()) @db.DateTime(0)
  updatedAt        DateTime       @updatedAt
  Organisation     Organisation[] @relation("OrganisationActivityEvents")
  Team             Team[]         @relation("TeamActivityEvents")
  User             User[]         @relation("UserActivityEvents")
}

model Address {
  id             String           @id @default(cuid()) @db.Char(30)
  type           String           @db.MediumText
  line1          String           @db.MediumText
  line2          String?          @db.MediumText
  city           String           @db.MediumText
  code           String           @db.MediumText
  province       String           @db.MediumText
  createdAt      DateTime
  updatedAt      DateTime
  client         Client[]         @relation("ClientAddress")
  GiveawayWinner GiveawayWinner[]
  SpinnerWinner  SpinnerWinner[]
  User           User[]
  WinnerForm     WinnerForm[]
}

model Advertisement {
  id                    String                 @id @default(cuid()) @db.Char(30)
  type                  String                 @db.MediumText
  externalLink          String?                @db.MediumText
  clicks                Int
  createdAt             DateTime
  updatedAt             DateTime
  media                 String?                @db.Char(30)
  campaign              String?                @db.Char(30)
  Media                 Media?                 @relation(fields: [media], references: [id], onUpdate: Restrict, map: "Advertisement_ibfk_1")
  AdvertisementCampaign AdvertisementCampaign? @relation(fields: [campaign], references: [id], onUpdate: Restrict, map: "Advertisement_ibfk_2")
  Analytics             Analytics[]

  @@index([campaign], map: "campaign")
  @@index([media], map: "media")
}

model AdvertisementCampaign {
  id               String             @id @default(cuid()) @db.Char(30)
  status           String             @db.MediumText
  type             String             @db.MediumText
  name             String             @db.MediumText
  startAt          DateTime
  endAt            DateTime
  priority         Boolean
  createdAt        DateTime
  updatedAt        DateTime
  client           String?            @db.Char(30)
  Client           Client?            @relation(fields: [client], references: [id], onUpdate: Restrict, map: "AdvertisementCampaign_ibfk_1")
  Advertisement    Advertisement[]
  CompetitionEvent CompetitionEvent[] @relation("AdvertisementCampaignEvents")
  WebsiteSettings  WebsiteSettings[]
  Spinner          Spinner[]          @relation("SpinnerAdvertismentCampaigns")

  @@index([client], map: "client")
}

model Analytics {
  id            String          @id @default(cuid()) @db.Char(30)
  ip            String?         @db.MediumText
  action        String?         @db.MediumText
  actionId      String?         @db.MediumText
  entityId      String?         @db.MediumText
  entityName    String?         @db.MediumText
  createdAt     DateTime
  updatedAt     DateTime
  user          String?         @db.Char(30)
  User          User?           @relation(fields: [user], references: [id], onUpdate: Restrict, map: "Analytics_ibfk_1")
  Advertisement Advertisement[]
  FeaturedTile  FeaturedTile[]
  Slider        Slider[]

  @@index([user], map: "user")
}

model Announcement {
  id               String             @id @default(cuid()) @db.Char(30)
  status           String             @db.MediumText
  name             String             @db.MediumText
  subject          String             @db.MediumText
  content          String             @db.MediumText
  scheduledAt      DateTime?
  createdAt        DateTime
  updatedAt        DateTime
  sponsorList      String?            @db.Char(30)
  SponsorList      SponsorList?       @relation(fields: [sponsorList], references: [id], onUpdate: Restrict, map: "Announcement_ibfk_1")
  AnnouncementUser AnnouncementUser[]
  AuditLog         AuditLog[]

  @@index([sponsorList], map: "sponsorList")
}

model AnnouncementUser {
  id           String        @id @default(cuid()) @db.Char(30)
  status       String        @db.MediumText
  read         Boolean
  sendError    String?       @db.MediumText
  createdAt    DateTime
  updatedAt    DateTime
  announcement String?       @db.Char(30)
  user         String?       @db.Char(30)
  Announcement Announcement? @relation(fields: [announcement], references: [id], onUpdate: Restrict, map: "AnnouncementUser_ibfk_1")
  User         User?         @relation(fields: [user], references: [id], onUpdate: Restrict, map: "AnnouncementUser_ibfk_2")

  @@index([announcement], map: "announcement")
  @@index([user], map: "user")
}

model Audience {
  id        String     @id @default(cuid()) @db.Char(30)
  name      String     @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  Campaign  Campaign[]
  User      User[]
}

model Audience2 {
  id         String    @id @default(cuid()) @db.Char(30)
  status     String    @db.MediumText
  opened     Boolean?
  bounce     Boolean?
  sendError  String?   @db.MediumText
  mandrillId String?   @db.MediumText
  createdAt  DateTime
  updatedAt  DateTime
  campaign   String?   @db.Char(30)
  user       String?   @db.Char(30)
  Campaign   Campaign? @relation(fields: [campaign], references: [id], onUpdate: Restrict, map: "Audience2_ibfk_1")
  User       User?     @relation(fields: [user], references: [id], onUpdate: Restrict, map: "Audience2_ibfk_2")

  @@index([campaign], map: "campaign")
  @@index([user], map: "user")
}

model AuditLog {
  id                 String            @id @default(cuid()) @db.Char(30)
  action             String            @db.MediumText
  description        String?           @db.MediumText
  relatedObject      String?           @db.MediumText
  relatedObjectId    String?           @db.MediumText
  relatedObjectField String?           @db.MediumText
  oldValue           String?           @db.MediumText
  newValue           String?           @db.MediumText
  otherValue         String?           @db.MediumText
  createdAt          DateTime
  updatedAt          DateTime
  updatedBy          String?           @db.Char(30)
  User               User?             @relation(fields: [updatedBy], references: [id], onUpdate: Restrict, map: "AuditLog_ibfk_1")
  Announcement       Announcement[]
  Campaign           Campaign[]
  CompetitionTeam    CompetitionTeam[]
  Team               Team[]
  WinnerForm         WinnerForm[]
  WithdrawForm       WithdrawForm[]
  SpinnerProduct     SpinnerProduct[]  @relation("SpinnerProductLogs")
  UserMission        UserMission[]     @relation("UserMissonLogs")

  @@index([updatedBy], map: "updatedBy")
}

model Award {
  id           String         @id @default(cuid()) @db.Char(30)
  status       String         @db.MediumText
  type         String         @db.MediumText
  name         String         @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  description  String?        @db.MediumText
  createdAt    DateTime
  updatedAt    DateTime
  badge        String?        @db.Char(30)
  Badge        Badge?         @relation(fields: [badge], references: [id], onUpdate: Restrict, map: "Award_ibfk_1")
  Organisation Organisation[] @relation("AwardOrganisations")
  Team         Team[]         @relation("AwardTeams")
  User         User[]         @relation("AwardUsers")

  @@index([badge], map: "badge")
}

model Badge {
  id                              String         @id @default(cuid()) @db.Char(30)
  status                          String         @db.MediumText
  type                            String         @db.MediumText
  order                           Int
  name                            String         @db.MediumText
  rarity                          String         @db.MediumText
  createdAt                       DateTime
  updatedAt                       DateTime
  fallbackLogo                    String?        @db.Char(30)
  parent                          String?        @db.Char(30)
  logo                            String?        @db.Char(30)
  Media_Badge_fallbackLogoToMedia Media?         @relation("Badge_fallbackLogoToMedia", fields: [fallbackLogo], references: [id], onUpdate: Restrict, map: "Badge_ibfk_1")
  Badge                           Badge?         @relation("BadgeToBadge_parent", fields: [parent], references: [id], onUpdate: Restrict, map: "Badge_ibfk_2")
  Media_Badge_logoToMedia         Media?         @relation("Badge_logoToMedia", fields: [logo], references: [id], onUpdate: Restrict, map: "Badge_ibfk_3")
  Award                           Award[]
  other_Badge                     Badge[]        @relation("BadgeToBadge_parent")
  Mission                         Mission[]
  Organisation                    Organisation[] @relation("BadgeOrganisations")
  Team                            Team[]         @relation("BadgeTeams")
  Badge_B                         Badge[]        @relation("BadgeUpgrades")
  Badge_A                         Badge[]        @relation("BadgeUpgrades")
  User                            User[]         @relation("BadgeUsers")

  @@index([fallbackLogo], map: "fallbackLogo")
  @@index([logo], map: "logo")
  @@index([parent], map: "parent")
}

model BankAccount {
  id             String           @id @default(cuid()) @db.Char(30)
  type           String           @db.MediumText
  bank           String           @db.MediumText
  accountHolder  String           @db.MediumText
  accountNumber  String           @db.MediumText
  branch         String           @db.MediumText
  branchNumber   String           @db.MediumText
  swiftCode      String?          @db.MediumText
  createdAt      DateTime
  updatedAt      DateTime
  user           String?          @db.Char(30)
  User           User?            @relation(fields: [user], references: [id], onUpdate: Restrict, map: "BankAccount_ibfk_1")
  GiveawayWinner GiveawayWinner[]
  WinnerForm     WinnerForm[]

  @@index([user], map: "user")
}

model BatchPayment {
  id                 String         @id @default(cuid()) @db.Char(30)
  status             String         @db.MediumText
  statusMessage      String?        @db.MediumText
  number             Int
  code               String?        @db.MediumText
  amount             String         @db.MediumText
  currency           String         @db.MediumText
  conversionCurrency String?        @db.MediumText
  conversionPrice    String?        @db.MediumText
  conversionDate     DateTime?
  paymentProcessor   String         @db.MediumText
  createdAt          DateTime
  updatedAt          DateTime
  WinnerForm         WinnerForm[]
  WithdrawForm       WithdrawForm[]
}

model BattleRoyaleScore {
  id               String             @id @default(cuid()) @db.Char(30)
  name             String             @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  positions        String             @db.MediumText
  kills            Int
  isPreset         Boolean
  createdAt        DateTime
  updatedAt        DateTime
  CompetitionStage CompetitionStage[]
}

model Blurb {
  id              String          @id @default(cuid()) @db.Char(30)
  status          String          @db.MediumText
  title           String          @db.MediumText
  slug            String          @unique(length: 191, map: "slug_UNIQUE") @db.MediumText
  content         String          @db.MediumText
  excerptOverride Boolean
  excerpt         String          @db.MediumText
  link            String?         @db.MediumText
  featured        Boolean?
  publishedAt     DateTime
  createdAt       DateTime
  updatedAt       DateTime
  author          String?         @db.Char(30)
  logo            String?         @db.Char(30)
  BlurbAuthor     BlurbAuthor?    @relation(fields: [author], references: [id], onUpdate: Restrict, map: "Blurb_ibfk_1")
  Media           Media?          @relation(fields: [logo], references: [id], onUpdate: Restrict, map: "Blurb_ibfk_2")
  BlurbCategory   BlurbCategory[] @relation("BlurbCategories")
  Realm           Realm[]         @relation("BlurbRealms")
  BlurbTag        BlurbTag[]      @relation("BlurbTags")

  @@index([author], map: "author")
  @@index([logo], map: "logo")
}

model BlurbAuthor {
  id        String   @id @default(cuid()) @db.Char(30)
  name      String   @db.MediumText
  title     String   @db.MediumText
  biography String?  @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  logo      String?  @db.Char(30)
  Media     Media?   @relation(fields: [logo], references: [id], onUpdate: Restrict, map: "BlurbAuthor_ibfk_1")
  Blurb     Blurb[]

  @@index([logo], map: "logo")
}

model BlurbCategory {
  id          String        @id @default(cuid()) @db.Char(30)
  name        String        @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  slug        String        @unique(length: 191, map: "slug_UNIQUE") @db.MediumText
  createdAt   DateTime
  updatedAt   DateTime
  Competition Competition[]
  Blurb       Blurb[]       @relation("BlurbCategories")
}

model BlurbTag {
  id        String   @id @default(cuid()) @db.Char(30)
  name      String   @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  slug      String   @unique(length: 191, map: "slug_UNIQUE") @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  Blurb     Blurb[]  @relation("BlurbTags")
}

model BountyLog {
  id                                         String            @id @default(cuid()) @db.Char(30)
  amount                                     Decimal
  createdAt                                  DateTime
  updatedAt                                  DateTime
  stage                                      String?           @db.Char(30)
  match                                      String?           @db.Char(30)
  team                                       String?           @db.Char(30)
  CompetitionStage                           CompetitionStage? @relation(fields: [stage], references: [id], onUpdate: Restrict, map: "BountyLog_ibfk_1")
  CompetitionMatch                           CompetitionMatch? @relation(fields: [match], references: [id], onUpdate: Restrict, map: "BountyLog_ibfk_2")
  CompetitionTeam_BountyLogToCompetitionTeam CompetitionTeam?  @relation(fields: [team], references: [id], onUpdate: Restrict, map: "BountyLog_ibfk_3")
  CompetitionTeam_CompetitionTeamBountyLogs  CompetitionTeam[] @relation("CompetitionTeamBountyLogs")

  @@index([match], map: "match")
  @@index([stage], map: "stage")
  @@index([team], map: "team")
}

model Breaking {
  id          String   @id @default(cuid()) @db.Char(30)
  content     String   @db.MediumText
  isLink      Boolean
  link        String?  @db.MediumText
  icon        String?  @db.MediumText
  publishedAt DateTime
  createdAt   DateTime
  updatedAt   DateTime
}

model BugReport {
  id                 String   @id @default(cuid()) @db.Char(30)
  status             String   @db.MediumText
  number             Int
  name               String   @db.MediumText
  email              String   @db.MediumText
  url                String   @db.MediumText
  description        String   @db.MediumText
  location           String?  @db.MediumText
  osVersion          String?  @db.MediumText
  osName             String?  @db.MediumText
  deviceType         String?  @db.MediumText
  browserName        String?  @db.MediumText
  fullBrowserVersion String?  @db.MediumText
  mobileVendor       String?  @db.MediumText
  mobileModel        String?  @db.MediumText
  createdAt          DateTime
  updatedAt          DateTime
  Media              Media[]
}

model Campaign {
  id                String      @id @default(cuid()) @db.Char(30)
  status            String      @db.MediumText
  name              String      @db.MediumText
  content           String      @db.MediumText
  html              String      @db.MediumText
  subject           String      @db.MediumText
  audienceSelection String      @db.MediumText
  scheduledAt       DateTime?
  createdAt         DateTime
  updatedAt         DateTime
  audience          String?     @db.Char(30)
  Audience          Audience?   @relation(fields: [audience], references: [id], onUpdate: Restrict, map: "Campaign_ibfk_1")
  Audience2         Audience2[]
  Recipient         Recipient[]
  AuditLog          AuditLog[]
  Tag               Tag[]

  @@index([audience], map: "audience")
}

model CarCategory {
  id               String             @id @default(cuid()) @db.Char(30)
  name             String             @db.MediumText
  createdAt        DateTime
  updatedAt        DateTime
  game             String?            @db.Char(30)
  Game             Game?              @relation(fields: [game], references: [id], onUpdate: Restrict, map: "CarCategory_ibfk_1")
  CompetitionEvent CompetitionEvent[]
  Livery           Livery[]
  Team             Team[]

  @@index([game], map: "game")
}

model CarMake {
  id        String   @id @default(cuid()) @db.Char(30)
  name      String   @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  Livery    Livery[]
}

model CarSelection {
  id               String            @id @default(cuid()) @db.Char(30)
  car              String            @db.MediumText
  number           Int
  createdAt        DateTime
  updatedAt        DateTime
  event            String?           @db.Char(30)
  CompetitionEvent CompetitionEvent? @relation(fields: [event], references: [id], onUpdate: Restrict, map: "CarSelection_ibfk_1")
  CompetitionTeam  CompetitionTeam[]

  @@index([event], map: "event")
}

model Chat {
  id               String             @id @default(cuid()) @db.Char(30)
  roomId           String             @unique(length: 191, map: "roomId_UNIQUE") @db.MediumText
  type             String             @db.MediumText
  noReply          Boolean?
  unread           Int?
  requestAdmin     Boolean?
  createdAt        DateTime
  updatedAt        DateTime
  CompetitionMatch CompetitionMatch[]
  Dispute          Dispute[]
  Message          Message[]
  User             User[]             @relation("ChatUsers")
}

model CheckIn {
  id               String            @id @default(cuid()) @db.Char(30)
  updatedAt        DateTime
  createdAt        DateTime
  user             String?           @db.Char(30)
  stage            String?           @db.Char(30)
  team             String?           @db.Char(30)
  User             User?             @relation(fields: [user], references: [id], onUpdate: Restrict, map: "CheckIn_ibfk_1")
  CompetitionStage CompetitionStage? @relation(fields: [stage], references: [id], onUpdate: Restrict, map: "CheckIn_ibfk_2")
  CompetitionTeam  CompetitionTeam?  @relation(fields: [team], references: [id], onUpdate: Restrict, map: "CheckIn_ibfk_3")

  @@index([stage], map: "stage")
  @@index([team], map: "team")
  @@index([user], map: "user")
}

model Client {
  id                                 String                  @id @default(cuid()) @db.Char(30)
  companyName                        String                  @unique(length: 191, map: "companyName_UNIQUE") @db.MediumText
  mainContactFirstName               String                  @db.MediumText
  mainContactLastName                String                  @db.MediumText
  mainContactEmail                   String                  @db.MediumText
  mainContactCellNumber              String?                 @db.MediumText
  hasSeperatePaymentContact          Boolean
  paymentContactFirstName            String?                 @db.MediumText
  paymentContactLastName             String?                 @db.MediumText
  paymentContactEmail                String?                 @db.MediumText
  paymentContactCellNumber           String?                 @db.MediumText
  allowAutomaticWinnerFormSubmission Boolean
  maxWinnerFormsOnSubmit             Int
  createdAt                          DateTime
  updatedAt                          DateTime
  companyLogo                        String?                 @db.Char(30)
  companyAddress                     String?                 @db.Char(30)
  media                              Media?                  @relation(fields: [companyLogo], references: [id], onUpdate: Restrict, map: "Client_ibfk_1")
  address                            Address?                @relation("ClientAddress", fields: [companyAddress], references: [id], onUpdate: Restrict, map: "Client_ibfk_2")
  advertisementCampaign              AdvertisementCampaign[]
  competitionEvent                   CompetitionEvent[]
  featuredTile                       FeaturedTile[]
  prizePool                          PrizePool[]
  slider                             Slider[]
  spinnerProduct                     SpinnerProduct[]
  WinnerForm                         WinnerForm[]

  @@index([companyAddress], map: "companyAddress")
  @@index([companyLogo], map: "companyLogo")
}

model Competition {
  id                                                    String             @id @default(cuid()) @db.Char(30)
  status                                                String?            @db.MediumText
  type                                                  String             @db.MediumText
  name                                                  String             @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  slug                                                  String             @unique(length: 191, map: "slug_UNIQUE") @db.MediumText
  showOnHomePage                                        Boolean
  teamCount                                             Int?
  primaryColor                                          String?            @db.MediumText
  hasCustomPageContent                                  Boolean
  createdAt                                             DateTime
  updatedAt                                             DateTime
  pageBackground                                        String?            @db.Char(30)
  tileBackground                                        String?            @db.Char(30)
  gameSelectorLogo                                      String?            @db.Char(30)
  pageContentDraft                                      String?            @db.Char(30)
  sponsorList                                           String?            @db.Char(30)
  gameLogo                                              String?            @db.Char(30)
  blurbCategory                                         String?            @db.Char(30)
  pageContent                                           String?            @db.Char(30)
  banner                                                String?            @db.Char(30)
  overviewBanner                                        String?            @db.Char(30)
  Media_Competition_pageBackgroundToMedia               Media?             @relation("Competition_pageBackgroundToMedia", fields: [pageBackground], references: [id], onUpdate: Restrict, map: "Competition_ibfk_1")
  Media_Competition_overviewBannerToMedia               Media?             @relation("Competition_overviewBannerToMedia", fields: [overviewBanner], references: [id], onUpdate: Restrict, map: "Competition_ibfk_10")
  Media_Competition_tileBackgroundToMedia               Media?             @relation("Competition_tileBackgroundToMedia", fields: [tileBackground], references: [id], onUpdate: Restrict, map: "Competition_ibfk_2")
  Media_Competition_gameSelectorLogoToMedia             Media?             @relation("Competition_gameSelectorLogoToMedia", fields: [gameSelectorLogo], references: [id], onUpdate: Restrict, map: "Competition_ibfk_3")
  PageContent_Competition_pageContentDraftToPageContent PageContent?       @relation("Competition_pageContentDraftToPageContent", fields: [pageContentDraft], references: [id], onUpdate: Restrict, map: "Competition_ibfk_4")
  SponsorList                                           SponsorList?       @relation(fields: [sponsorList], references: [id], onUpdate: Restrict, map: "Competition_ibfk_5")
  Media_Competition_gameLogoToMedia                     Media?             @relation("Competition_gameLogoToMedia", fields: [gameLogo], references: [id], onUpdate: Restrict, map: "Competition_ibfk_6")
  BlurbCategory                                         BlurbCategory?     @relation(fields: [blurbCategory], references: [id], onUpdate: Restrict, map: "Competition_ibfk_7")
  PageContent_Competition_pageContentToPageContent      PageContent?       @relation("Competition_pageContentToPageContent", fields: [pageContent], references: [id], onUpdate: Restrict, map: "Competition_ibfk_8")
  Media_Competition_bannerToMedia                       Media?             @relation("Competition_bannerToMedia", fields: [banner], references: [id], onUpdate: Restrict, map: "Competition_ibfk_9")
  CompetitionEvent                                      CompetitionEvent[]
  CompetitionMatch                                      CompetitionMatch[]
  CompetitionStage                                      CompetitionStage[]
  CompetitionTeam                                       CompetitionTeam[]
  Role                                                  Role[]

  @@index([banner], map: "banner")
  @@index([blurbCategory], map: "blurbCategory")
  @@index([gameLogo], map: "gameLogo")
  @@index([gameSelectorLogo], map: "gameSelectorLogo")
  @@index([overviewBanner], map: "overviewBanner")
  @@index([pageBackground], map: "pageBackground")
  @@index([pageContent], map: "pageContent")
  @@index([pageContentDraft], map: "pageContentDraft")
  @@index([sponsorList], map: "sponsorList")
  @@index([tileBackground], map: "tileBackground")
}

model CompetitionEvent {
  id                                                     String                          @id @default(cuid()) @db.Char(30)
  eventId                                                String                          @unique(length: 191, map: "eventId_UNIQUE") @db.MediumText
  order                                                  Int
  status                                                 String                          @db.MediumText
  type                                                   String                          @db.MediumText
  name                                                   String?                         @db.MediumText
  namePosition                                           String?                         @db.MediumText
  registrationOpenDate                                   DateTime?
  registrationCloseDate                                  DateTime?
  startDate                                              DateTime?
  endDate                                                DateTime?
  maxEntriesPerOrganisation                              Int
  maxEntries                                             Int
  minEntries                                             Int
  rosterLock                                             Boolean
  showOnHomePage                                         Boolean
  vipPrizePool                                           Boolean
  replaceAllWithPageContent                              Boolean
  ageRestricted                                          Boolean?
  minAge                                                 Int?
  maxAge                                                 Int?
  requiresRegistration                                   Boolean
  requiresConfirmation                                   Boolean
  streamLink                                             String?                         @db.MediumText
  streamName                                             String?                         @db.MediumText
  streamIsLive                                           Boolean?
  advertisementDisplayType                               String?                         @db.MediumText
  advertisementRotationTime                              Int?
  createdAt                                              DateTime
  updatedAt                                              DateTime
  competition                                            String?                         @db.Char(30)
  overviewBanner                                         String?                         @db.Char(30)
  pageContent                                            String?                         @db.Char(30)
  gameVariant                                            String?                         @db.Char(30)
  prizePool                                              String?                         @db.Char(30)
  liveryCategory                                         String?                         @db.Char(30)
  pageBackground                                         String?                         @db.Char(30)
  banner                                                 String?                         @db.Char(30)
  client                                                 String?                         @db.Char(30)
  game                                                   String?                         @db.Char(30)
  signupBanner                                           String?                         @db.Char(30)
  gameLogo                                               String?                         @db.Char(30)
  rulesContent                                           String?                         @db.Char(30)
  Competition                                            Competition?                    @relation(fields: [competition], references: [id], onUpdate: Restrict, map: "CompetitionEvent_ibfk_1")
  Game                                                   Game?                           @relation(fields: [game], references: [id], onUpdate: Restrict, map: "CompetitionEvent_ibfk_10")
  Media_CompetitionEvent_signupBannerToMedia             Media?                          @relation("CompetitionEvent_signupBannerToMedia", fields: [signupBanner], references: [id], onUpdate: Restrict, map: "CompetitionEvent_ibfk_11")
  Media_CompetitionEvent_gameLogoToMedia                 Media?                          @relation("CompetitionEvent_gameLogoToMedia", fields: [gameLogo], references: [id], onUpdate: Restrict, map: "CompetitionEvent_ibfk_12")
  PageContent_CompetitionEvent_rulesContentToPageContent PageContent?                    @relation("CompetitionEvent_rulesContentToPageContent", fields: [rulesContent], references: [id], onUpdate: Restrict, map: "CompetitionEvent_ibfk_13")
  Media_CompetitionEvent_overviewBannerToMedia           Media?                          @relation("CompetitionEvent_overviewBannerToMedia", fields: [overviewBanner], references: [id], onUpdate: Restrict, map: "CompetitionEvent_ibfk_2")
  PageContent_CompetitionEvent_pageContentToPageContent  PageContent?                    @relation("CompetitionEvent_pageContentToPageContent", fields: [pageContent], references: [id], onUpdate: Restrict, map: "CompetitionEvent_ibfk_3")
  GameVariant_CompetitionEventToGameVariant              GameVariant?                    @relation(fields: [gameVariant], references: [id], onUpdate: Restrict, map: "CompetitionEvent_ibfk_4")
  PrizePool                                              PrizePool?                      @relation(fields: [prizePool], references: [id], onUpdate: Restrict, map: "CompetitionEvent_ibfk_5")
  CarCategory                                            CarCategory?                    @relation(fields: [liveryCategory], references: [id], onUpdate: Restrict, map: "CompetitionEvent_ibfk_6")
  Media_CompetitionEvent_pageBackgroundToMedia           Media?                          @relation("CompetitionEvent_pageBackgroundToMedia", fields: [pageBackground], references: [id], onUpdate: Restrict, map: "CompetitionEvent_ibfk_7")
  Media_CompetitionEvent_bannerToMedia                   Media?                          @relation("CompetitionEvent_bannerToMedia", fields: [banner], references: [id], onUpdate: Restrict, map: "CompetitionEvent_ibfk_8")
  Client                                                 Client?                         @relation(fields: [client], references: [id], onUpdate: Restrict, map: "CompetitionEvent_ibfk_9")
  CarSelection                                           CarSelection[]
  CompetitionEventScheduleGroup                          CompetitionEventScheduleGroup[]
  CompetitionMatch                                       CompetitionMatch[]
  CompetitionStage                                       CompetitionStage[]
  CompetitionTeam                                        CompetitionTeam[]
  HomepageEvent                                          HomepageEvent[]
  AdvertisementCampaign                                  AdvertisementCampaign[]         @relation("AdvertisementCampaignEvents")
  Country                                                Country[]                       @relation("CompetitionEventCountries")
  Popup                                                  Popup[]
  GameVariant_CompetitionGameVariants                    GameVariant[]                   @relation("CompetitionGameVariants")
  Platform                                               Platform[]                      @relation("CompetitionPlatforms")

  @@index([banner], map: "banner")
  @@index([client], map: "client")
  @@index([competition], map: "competition")
  @@index([game], map: "game")
  @@index([gameLogo], map: "gameLogo")
  @@index([gameVariant], map: "gameVariant")
  @@index([liveryCategory], map: "liveryCategory")
  @@index([overviewBanner], map: "overviewBanner")
  @@index([pageBackground], map: "pageBackground")
  @@index([pageContent], map: "pageContent")
  @@index([prizePool], map: "prizePool")
  @@index([rulesContent], map: "rulesContent")
  @@index([signupBanner], map: "signupBanner")
}

model CompetitionEventSchedule {
  id                                        String                          @id @default(cuid()) @db.Char(30)
  date                                      DateTime
  format                                    String                          @db.MediumText
  round                                     String                          @db.MediumText
  team1Score                                Int?
  team2Score                                Int?
  createdAt                                 DateTime
  updatedAt                                 DateTime
  team1                                     String?                         @db.Char(30)
  team2                                     String?                         @db.Char(30)
  Team_CompetitionEventSchedule_team1ToTeam Team?                           @relation("CompetitionEventSchedule_team1ToTeam", fields: [team1], references: [id], onUpdate: Restrict, map: "CompetitionEventSchedule_ibfk_1")
  Team_CompetitionEventSchedule_team2ToTeam Team?                           @relation("CompetitionEventSchedule_team2ToTeam", fields: [team2], references: [id], onUpdate: Restrict, map: "CompetitionEventSchedule_ibfk_2")
  CompetitionEventScheduleGroup             CompetitionEventScheduleGroup[] @relation("CompetitionEventScheduleToCompetitionEventScheduleGrou")

  @@index([team1], map: "team1")
  @@index([team2], map: "team2")
}

model CompetitionEventScheduleGroup {
  id                       String                     @id @default(cuid()) @db.Char(30)
  title                    String                     @db.MediumText
  createdAt                DateTime
  updatedAt                DateTime
  event                    String?                    @db.Char(30)
  CompetitionEvent         CompetitionEvent?          @relation(fields: [event], references: [id], onUpdate: Restrict, map: "CompetitionEventScheduleGroup_ibfk_1")
  CompetitionEventSchedule CompetitionEventSchedule[] @relation("CompetitionEventScheduleToCompetitionEventScheduleGrou")

  @@index([event], map: "event")
}

model CompetitionGroup {
  id                        String                      @id @default(cuid()) @db.Char(30)
  number                    Int?
  createdAt                 DateTime
  updatedAt                 DateTime
  stage                     String?                     @db.Char(30)
  CompetitionStage          CompetitionStage?           @relation(fields: [stage], references: [id], onUpdate: Restrict, map: "CompetitionGroup_ibfk_1")
  CompetitionGroupStanding  CompetitionGroupStanding[]
  CompetitionMatch          CompetitionMatch[]
  CompetitionRacingStanding CompetitionRacingStanding[]
  CompetitionRound          CompetitionRound[]
  CompetitionRoyaleStanding CompetitionRoyaleStanding[]
  CompetitionTeam           CompetitionTeam[]           @relation("CompetitionGroupTeams")

  @@index([stage], map: "stage")
}

model CompetitionGroupStanding {
  id               String            @id @default(cuid()) @db.Char(30)
  rank             Int
  played           Int
  won              Int
  drawn            Int
  lost             Int
  forfeited        Int
  scoreFor         Int
  scoreAgainst     Int
  difference       Int
  points           Int
  team             String?           @db.Char(30)
  group            String?           @db.Char(30)
  CompetitionTeam  CompetitionTeam?  @relation(fields: [team], references: [id], onUpdate: Restrict, map: "CompetitionGroupStanding_ibfk_1")
  CompetitionGroup CompetitionGroup? @relation(fields: [group], references: [id], onUpdate: Restrict, map: "CompetitionGroupStanding_ibfk_2")

  @@index([group], map: "group")
  @@index([team], map: "team")
}

model CompetitionMatch {
  id                                           String                 @id @default(cuid()) @db.Char(30)
  number                                       Int
  type                                         String?                @db.MediumText
  status                                       String                 @db.MediumText
  acceptedDate                                 DateTime?
  forfeitWarningAt                             DateTime?
  forfeitedAt                                  DateTime?
  createdAt                                    DateTime
  updatedAt                                    DateTime
  chat                                         String?                @db.Char(30)
  round                                        String?                @db.Char(30)
  event                                        String?                @db.Char(30)
  stage                                        String?                @db.Char(30)
  forfeitWarningBy                             String?                @db.Char(30)
  forfeitedBy                                  String?                @db.Char(30)
  competition                                  String?                @db.Char(30)
  group                                        String?                @db.Char(30)
  Chat                                         Chat?                  @relation(fields: [chat], references: [id], onUpdate: Restrict, map: "CompetitionMatch_ibfk_1")
  CompetitionRound                             CompetitionRound?      @relation(fields: [round], references: [id], onUpdate: Restrict, map: "CompetitionMatch_ibfk_2")
  CompetitionEvent                             CompetitionEvent?      @relation(fields: [event], references: [id], onUpdate: Restrict, map: "CompetitionMatch_ibfk_3")
  CompetitionStage                             CompetitionStage?      @relation(fields: [stage], references: [id], onUpdate: Restrict, map: "CompetitionMatch_ibfk_4")
  User_CompetitionMatch_forfeitWarningByToUser User?                  @relation("CompetitionMatch_forfeitWarningByToUser", fields: [forfeitWarningBy], references: [id], onUpdate: Restrict, map: "CompetitionMatch_ibfk_5")
  User_CompetitionMatch_forfeitedByToUser      User?                  @relation("CompetitionMatch_forfeitedByToUser", fields: [forfeitedBy], references: [id], onUpdate: Restrict, map: "CompetitionMatch_ibfk_6")
  Competition                                  Competition?           @relation(fields: [competition], references: [id], onUpdate: Restrict, map: "CompetitionMatch_ibfk_7")
  CompetitionGroup                             CompetitionGroup?      @relation(fields: [group], references: [id], onUpdate: Restrict, map: "CompetitionMatch_ibfk_8")
  BountyLog                                    BountyLog[]
  CompetitionMatchTeam                         CompetitionMatchTeam[]
  Dispute                                      Dispute[]
  Media                                        Media[]
  Schedule                                     Schedule[]

  @@index([chat], map: "chat")
  @@index([competition], map: "competition")
  @@index([event], map: "event")
  @@index([forfeitWarningBy], map: "forfeitWarningBy")
  @@index([forfeitedBy], map: "forfeitedBy")
  @@index([group], map: "group")
  @@index([round], map: "round")
  @@index([stage], map: "stage")
}

model CompetitionMatchTeam {
  id                                              String                  @id @default(cuid()) @db.Char(30)
  hasPassword                                     Boolean
  matchId                                         String?                 @db.MediumText
  matchPassword                                   String?                 @db.MediumText
  number                                          Int
  result                                          String?                 @db.MediumText
  score                                           Int?
  predictionCount                                 Int
  createdAt                                       DateTime
  updatedAt                                       DateTime
  racingScore                                     String?                 @db.Char(30)
  match                                           String?                 @db.Char(30)
  submittedByTeam                                 String?                 @db.Char(30)
  acceptedByUser                                  String?                 @db.Char(30)
  team                                            String?                 @db.Char(30)
  submittedByUser                                 String?                 @db.Char(30)
  royaleScore                                     String?                 @db.Char(30)
  acceptedByTeam                                  String?                 @db.Char(30)
  CompetitionRacingScore                          CompetitionRacingScore? @relation(fields: [racingScore], references: [id], onUpdate: Restrict, map: "CompetitionMatchTeam_ibfk_1")
  CompetitionMatch                                CompetitionMatch?       @relation(fields: [match], references: [id], onUpdate: Restrict, map: "CompetitionMatchTeam_ibfk_2")
  Team_CompetitionMatchTeam_submittedByTeamToTeam Team?                   @relation("CompetitionMatchTeam_submittedByTeamToTeam", fields: [submittedByTeam], references: [id], onUpdate: Restrict, map: "CompetitionMatchTeam_ibfk_3")
  User_CompetitionMatchTeam_acceptedByUserToUser  User?                   @relation("CompetitionMatchTeam_acceptedByUserToUser", fields: [acceptedByUser], references: [id], onUpdate: Restrict, map: "CompetitionMatchTeam_ibfk_4")
  CompetitionTeam                                 CompetitionTeam?        @relation(fields: [team], references: [id], onUpdate: Restrict, map: "CompetitionMatchTeam_ibfk_5")
  User_CompetitionMatchTeam_submittedByUserToUser User?                   @relation("CompetitionMatchTeam_submittedByUserToUser", fields: [submittedByUser], references: [id], onUpdate: Restrict, map: "CompetitionMatchTeam_ibfk_6")
  CompetitionRoyaleScore                          CompetitionRoyaleScore? @relation(fields: [royaleScore], references: [id], onUpdate: Restrict, map: "CompetitionMatchTeam_ibfk_7")
  Team_CompetitionMatchTeam_acceptedByTeamToTeam  Team?                   @relation("CompetitionMatchTeam_acceptedByTeamToTeam", fields: [acceptedByTeam], references: [id], onUpdate: Restrict, map: "CompetitionMatchTeam_ibfk_8")
  MatchTeamPrediction                             MatchTeamPrediction[]

  @@index([acceptedByTeam], map: "acceptedByTeam")
  @@index([acceptedByUser], map: "acceptedByUser")
  @@index([match], map: "match")
  @@index([racingScore], map: "racingScore")
  @@index([royaleScore], map: "royaleScore")
  @@index([submittedByTeam], map: "submittedByTeam")
  @@index([submittedByUser], map: "submittedByUser")
  @@index([team], map: "team")
}

model CompetitionRacingScore {
  id                                                                                             String                        @id @default(cuid()) @db.Char(30)
  position                                                                                       Int?
  totalTime                                                                                      Int?
  laps                                                                                           Int?
  bestLap                                                                                        Int?
  createdAt                                                                                      DateTime
  updatedAt                                                                                      DateTime
  player2Score                                                                                   String?                       @db.Char(30)
  player1Score                                                                                   String?                       @db.Char(30)
  PlayerCompetitionRacingScore_CompetitionRacingScore_player2ScoreToPlayerCompetitionRacingScore PlayerCompetitionRacingScore? @relation("CompetitionRacingScore_player2ScoreToPlayerCompetitionRacingScore", fields: [player2Score], references: [id], onUpdate: Restrict, map: "CompetitionRacingScore_ibfk_1")
  PlayerCompetitionRacingScore_CompetitionRacingScore_player1ScoreToPlayerCompetitionRacingScore PlayerCompetitionRacingScore? @relation("CompetitionRacingScore_player1ScoreToPlayerCompetitionRacingScore", fields: [player1Score], references: [id], onUpdate: Restrict, map: "CompetitionRacingScore_ibfk_2")
  CompetitionMatchTeam                                                                           CompetitionMatchTeam[]

  @@index([player1Score], map: "player1Score")
  @@index([player2Score], map: "player2Score")
}

model CompetitionRacingStanding {
  id               String            @id @default(cuid()) @db.Char(30)
  rank             Int
  week1            Int
  week2            Int
  week3            Int
  week4            Int
  week5            Int
  week6            Int
  total            Int
  team             String?           @db.Char(30)
  group            String?           @db.Char(30)
  CompetitionTeam  CompetitionTeam?  @relation(fields: [team], references: [id], onUpdate: Restrict, map: "CompetitionRacingStanding_ibfk_1")
  CompetitionGroup CompetitionGroup? @relation(fields: [group], references: [id], onUpdate: Restrict, map: "CompetitionRacingStanding_ibfk_2")

  @@index([group], map: "group")
  @@index([team], map: "team")
}

model CompetitionRound {
  id               String             @id @default(cuid()) @db.Char(30)
  number           Int
  name             String?            @db.MediumText
  createdAt        DateTime
  updatedAt        DateTime
  group            String?            @db.Char(30)
  CompetitionGroup CompetitionGroup?  @relation(fields: [group], references: [id], onUpdate: Restrict, map: "CompetitionRound_ibfk_1")
  CompetitionMatch CompetitionMatch[]

  @@index([group], map: "group")
}

model CompetitionRoyaleScore {
  id                                                                                             String                        @id @default(cuid()) @db.Char(30)
  position                                                                                       Int?
  kills                                                                                          Int?
  damage                                                                                         Int?
  createdAt                                                                                      DateTime
  updatedAt                                                                                      DateTime
  player3Score                                                                                   String?                       @db.Char(30)
  player2Score                                                                                   String?                       @db.Char(30)
  player1Score                                                                                   String?                       @db.Char(30)
  player5Score                                                                                   String?                       @db.Char(30)
  player4Score                                                                                   String?                       @db.Char(30)
  PlayerCompetitionRoyaleScore_CompetitionRoyaleScore_player3ScoreToPlayerCompetitionRoyaleScore PlayerCompetitionRoyaleScore? @relation("CompetitionRoyaleScore_player3ScoreToPlayerCompetitionRoyaleScore", fields: [player3Score], references: [id], onUpdate: Restrict, map: "CompetitionRoyaleScore_ibfk_1")
  PlayerCompetitionRoyaleScore_CompetitionRoyaleScore_player2ScoreToPlayerCompetitionRoyaleScore PlayerCompetitionRoyaleScore? @relation("CompetitionRoyaleScore_player2ScoreToPlayerCompetitionRoyaleScore", fields: [player2Score], references: [id], onUpdate: Restrict, map: "CompetitionRoyaleScore_ibfk_2")
  PlayerCompetitionRoyaleScore_CompetitionRoyaleScore_player1ScoreToPlayerCompetitionRoyaleScore PlayerCompetitionRoyaleScore? @relation("CompetitionRoyaleScore_player1ScoreToPlayerCompetitionRoyaleScore", fields: [player1Score], references: [id], onUpdate: Restrict, map: "CompetitionRoyaleScore_ibfk_3")
  PlayerCompetitionRoyaleScore_CompetitionRoyaleScore_player5ScoreToPlayerCompetitionRoyaleScore PlayerCompetitionRoyaleScore? @relation("CompetitionRoyaleScore_player5ScoreToPlayerCompetitionRoyaleScore", fields: [player5Score], references: [id], onUpdate: Restrict, map: "CompetitionRoyaleScore_ibfk_4")
  PlayerCompetitionRoyaleScore_CompetitionRoyaleScore_player4ScoreToPlayerCompetitionRoyaleScore PlayerCompetitionRoyaleScore? @relation("CompetitionRoyaleScore_player4ScoreToPlayerCompetitionRoyaleScore", fields: [player4Score], references: [id], onUpdate: Restrict, map: "CompetitionRoyaleScore_ibfk_5")
  CompetitionMatchTeam                                                                           CompetitionMatchTeam[]

  @@index([player1Score], map: "player1Score")
  @@index([player2Score], map: "player2Score")
  @@index([player3Score], map: "player3Score")
  @@index([player4Score], map: "player4Score")
  @@index([player5Score], map: "player5Score")
}

model CompetitionRoyaleStanding {
  id               String            @id @default(cuid()) @db.Char(30)
  rank             Int
  week1            Int
  week2            Int
  week3            Int
  week4            Int
  total            Int
  team             String?           @db.Char(30)
  group            String?           @db.Char(30)
  CompetitionTeam  CompetitionTeam?  @relation(fields: [team], references: [id], onUpdate: Restrict, map: "CompetitionRoyaleStanding_ibfk_1")
  CompetitionGroup CompetitionGroup? @relation(fields: [group], references: [id], onUpdate: Restrict, map: "CompetitionRoyaleStanding_ibfk_2")

  @@index([group], map: "group")
  @@index([team], map: "team")
}

model CompetitionStage {
  id                                                                  String                  @id @default(cuid()) @db.Char(30)
  order                                                               Int
  status                                                              String                  @db.MediumText
  type                                                                String                  @db.MediumText
  name                                                                String                  @db.MediumText
  slug                                                                String                  @db.MediumText
  groupLimit                                                          Int
  allowSubmissionVoting                                               Boolean
  showSubmissionVoting                                                Boolean
  matchLimit                                                          Int?
  roundLimit                                                          Int?
  matchPageOpen                                                       Int?
  matchPageClose                                                      Int?
  relegation                                                          Int?
  maxLosses                                                           Int?
  showConsolationRound                                                Boolean
  allowScheduling                                                     Boolean
  allowScoreUpload                                                    Boolean
  bountyTake                                                          Int?
  startDate                                                           DateTime?
  endDate                                                             DateTime?
  matchCodes                                                          String?                 @db.MediumText
  createdAt                                                           DateTime
  updatedAt                                                           DateTime
  demoteTo                                                            String?                 @db.Char(30)
  competition                                                         String?                 @db.Char(30)
  event                                                               String?                 @db.Char(30)
  promoteTo                                                           String?                 @db.Char(30)
  matchBanner                                                         String?                 @db.Char(30)
  battleRoyaleScore                                                   String?                 @db.Char(30)
  CompetitionStage_CompetitionStageToCompetitionStage_demoteTo        CompetitionStage?       @relation("CompetitionStageToCompetitionStage_demoteTo", fields: [demoteTo], references: [id], onUpdate: Restrict, map: "CompetitionStage_ibfk_1")
  Competition                                                         Competition?            @relation(fields: [competition], references: [id], onUpdate: Restrict, map: "CompetitionStage_ibfk_2")
  CompetitionEvent                                                    CompetitionEvent?       @relation(fields: [event], references: [id], onUpdate: Restrict, map: "CompetitionStage_ibfk_3")
  CompetitionStage_CompetitionStageToCompetitionStage_promoteTo       CompetitionStage?       @relation("CompetitionStageToCompetitionStage_promoteTo", fields: [promoteTo], references: [id], onUpdate: Restrict, map: "CompetitionStage_ibfk_4")
  Media                                                               Media?                  @relation(fields: [matchBanner], references: [id], onUpdate: Restrict, map: "CompetitionStage_ibfk_5")
  BattleRoyaleScore                                                   BattleRoyaleScore?      @relation(fields: [battleRoyaleScore], references: [id], onUpdate: Restrict, map: "CompetitionStage_ibfk_6")
  BountyLog                                                           BountyLog[]
  CheckIn                                                             CheckIn[]
  CompetitionGroup                                                    CompetitionGroup[]
  CompetitionMatch                                                    CompetitionMatch[]
  other_CompetitionStage_CompetitionStageToCompetitionStage_demoteTo  CompetitionStage[]      @relation("CompetitionStageToCompetitionStage_demoteTo")
  other_CompetitionStage_CompetitionStageToCompetitionStage_promoteTo CompetitionStage[]      @relation("CompetitionStageToCompetitionStage_promoteTo")
  CompetitionSubmission                                               CompetitionSubmission[]
  WinnerForm                                                          WinnerForm[]
  CompetitionTeam                                                     CompetitionTeam[]       @relation("CompetitionStageTeams")

  @@index([battleRoyaleScore], map: "battleRoyaleScore")
  @@index([competition], map: "competition")
  @@index([demoteTo], map: "demoteTo")
  @@index([event], map: "event")
  @@index([matchBanner], map: "matchBanner")
  @@index([promoteTo], map: "promoteTo")
}

model CompetitionSubmission {
  id                               String            @id @default(cuid()) @db.Char(30)
  email                            String?           @db.MediumText
  createdAt                        DateTime
  updatedAt                        DateTime
  stage                            String?           @db.Char(30)
  user                             String?           @db.Char(30)
  shortenedLink                    String?           @db.Char(30)
  CompetitionStage                 CompetitionStage? @relation(fields: [stage], references: [id], onUpdate: Restrict, map: "CompetitionSubmission_ibfk_1")
  User_CompetitionSubmissionToUser User?             @relation(fields: [user], references: [id], onUpdate: Restrict, map: "CompetitionSubmission_ibfk_2")
  ShortenedLink                    ShortenedLink?    @relation(fields: [shortenedLink], references: [id], onUpdate: Restrict, map: "CompetitionSubmission_ibfk_3")
  Media                            Media[]
  User_CompetitionSubmissionVotes  User[]            @relation("CompetitionSubmissionVotes")

  @@index([shortenedLink], map: "shortenedLink")
  @@index([stage], map: "stage")
  @@index([user], map: "user")
}

model CompetitionTeam {
  id                                   String                      @id @default(cuid()) @db.Char(30)
  status                               String                      @db.MediumText
  seed                                 Int
  forfeited                            Boolean
  parentEmail                          String?                     @db.MediumText
  bounty                               Decimal?
  competed                             Boolean
  createdAt                            DateTime
  updatedAt                            DateTime
  user                                 String?                     @db.Char(30)
  team                                 String?                     @db.Char(30)
  event                                String?                     @db.Char(30)
  carSelection                         String?                     @db.Char(30)
  competition                          String?                     @db.Char(30)
  User_CompetitionTeamToUser           User?                       @relation(fields: [user], references: [id], onUpdate: Restrict, map: "CompetitionTeam_ibfk_1")
  Team                                 Team?                       @relation(fields: [team], references: [id], onUpdate: Restrict, map: "CompetitionTeam_ibfk_2")
  CompetitionEvent                     CompetitionEvent?           @relation(fields: [event], references: [id], onUpdate: Restrict, map: "CompetitionTeam_ibfk_3")
  CarSelection                         CarSelection?               @relation(fields: [carSelection], references: [id], onUpdate: Restrict, map: "CompetitionTeam_ibfk_4")
  Competition                          Competition?                @relation(fields: [competition], references: [id], onUpdate: Restrict, map: "CompetitionTeam_ibfk_5")
  BountyLog_BountyLogToCompetitionTeam BountyLog[]
  CheckIn                              CheckIn[]
  CompetitionGroupStanding             CompetitionGroupStanding[]
  CompetitionMatchTeam                 CompetitionMatchTeam[]
  CompetitionRacingStanding            CompetitionRacingStanding[]
  CompetitionRoyaleStanding            CompetitionRoyaleStanding[]
  AuditLog                             AuditLog[]
  CompetitionGroup                     CompetitionGroup[]          @relation("CompetitionGroupTeams")
  CompetitionStage                     CompetitionStage[]          @relation("CompetitionStageTeams")
  BountyLog_CompetitionTeamBountyLogs  BountyLog[]                 @relation("CompetitionTeamBountyLogs")
  User_CompetitionTeamRoster           User[]                      @relation("CompetitionTeamRoster")

  @@index([carSelection], map: "carSelection")
  @@index([competition], map: "competition")
  @@index([event], map: "event")
  @@index([team], map: "team")
  @@index([user], map: "user")
}

model ContactForm {
  id        String   @id @default(cuid()) @db.Char(30)
  status    String   @db.MediumText
  name      String   @db.MediumText
  email     String   @db.MediumText
  subject   String   @db.MediumText
  message   String   @db.MediumText
  createdAt DateTime
  updatedAt DateTime
}

model Country {
  id               String             @id @default(cuid()) @db.Char(30)
  status           String             @db.MediumText
  name             String             @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  slug             String             @unique(length: 191, map: "slug_UNIQUE") @db.MediumText
  shortName        String             @unique(length: 191, map: "shortName_UNIQUE") @db.MediumText
  createdAt        DateTime
  updatedAt        DateTime
  CompetitionEvent CompetitionEvent[] @relation("CompetitionEventCountries")
}

model DiscordUser {
  id            String    @id @default(cuid()) @db.Char(30)
  discordId     String    @unique(length: 191, map: "discordId_UNIQUE") @db.MediumText
  username      String?   @db.MediumText
  avatar        String?   @db.MediumText
  discriminator String?   @db.MediumText
  publicFlags   Int?
  flags         Int?
  locale        String?   @db.MediumText
  mfaEnabled    Boolean?
  email         String?   @db.MediumText
  verified      Boolean?
  authToken     String?   @db.MediumText
  refreshToken  String?   @db.MediumText
  expires       DateTime?
  createdAt     DateTime
  updatedAt     DateTime
  User          User[]
}

model Dispute {
  id               String             @id @default(cuid()) @db.Char(30)
  subject          String?            @db.MediumText
  createdAt        DateTime
  updatedAt        DateTime
  createdByTeam    String?            @db.Char(30)
  createdByUser    String?            @db.Char(30)
  chat             String?            @db.Char(30)
  Team             Team?              @relation(fields: [createdByTeam], references: [id], onUpdate: Restrict, map: "Dispute_ibfk_1")
  User             User?              @relation(fields: [createdByUser], references: [id], onUpdate: Restrict, map: "Dispute_ibfk_2")
  Chat             Chat?              @relation(fields: [chat], references: [id], onUpdate: Restrict, map: "Dispute_ibfk_3")
  CompetitionMatch CompetitionMatch[]

  @@index([chat], map: "chat")
  @@index([createdByTeam], map: "createdByTeam")
  @@index([createdByUser], map: "createdByUser")
}

model Draw {
  id        String      @id @default(cuid()) @db.Char(30)
  name      String      @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  DrawEntry DrawEntry[]
}

model DrawEntry {
  id        String   @id @default(cuid()) @db.Char(30)
  createdAt DateTime
  updatedAt DateTime
  user      String?  @db.Char(30)
  draw      String?  @db.Char(30)
  User      User?    @relation(fields: [user], references: [id], onUpdate: Restrict, map: "DrawEntry_ibfk_1")
  Draw      Draw?    @relation(fields: [draw], references: [id], onUpdate: Restrict, map: "DrawEntry_ibfk_2")

  @@index([draw], map: "draw")
  @@index([user], map: "user")
}

model DrawWinner {
  id        String   @id @default(cuid()) @db.Char(30)
  winAt     DateTime
  createdAt DateTime
  updatedAt DateTime
  user      String?  @db.Char(30)
  User      User?    @relation(fields: [user], references: [id], onUpdate: Restrict, map: "DrawWinner_ibfk_1")

  @@index([user], map: "user")
}

model Email {
  id        String   @id @default(cuid()) @db.Char(30)
  subject   String   @db.MediumText
  preview   String   @db.MediumText
  content   String   @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  user      String?  @db.Char(30)
  User      User?    @relation(fields: [user], references: [id], onUpdate: Restrict, map: "Email_ibfk_1")

  @@index([user], map: "user")
}

model EmailTemplate {
  id        String   @id @default(cuid()) @db.Char(30)
  name      String   @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  content   String   @db.MediumText
  html      String   @db.MediumText
  options   String?  @db.MediumText
  createdAt DateTime
  updatedAt DateTime
}

model Faq {
  id          String       @id @default(cuid()) @db.Char(30)
  status      String       @db.MediumText
  order       Int
  title       String       @unique(length: 191, map: "title_UNIQUE") @db.MediumText
  slug        String       @unique(length: 191, map: "slug_UNIQUE") @db.MediumText
  description String?      @db.MediumText
  content     String       @db.MediumText
  createdAt   DateTime
  updatedAt   DateTime
  category    String?      @db.Char(30)
  FaqCategory FaqCategory? @relation(fields: [category], references: [id], onUpdate: Restrict, map: "Faq_ibfk_1")

  @@index([category], map: "category")
}

model FaqCategory {
  id        String   @id @default(cuid()) @db.Char(30)
  name      String   @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  slug      String   @unique(length: 191, map: "slug_UNIQUE") @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  Faq       Faq[]
}

model FeaturedTile {
  id              String      @id @default(cuid()) @db.Char(30)
  status          String      @db.MediumText
  order           Int
  name            String      @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  link            String      @db.MediumText
  linkTarget      String      @db.MediumText
  linkType        String      @db.MediumText
  modalTitle      String?     @db.MediumText
  modalContent    String?     @db.MediumText
  modalCss        String?     @db.MediumText
  modalTheme      String?     @db.MediumText
  modalHeader     Boolean?
  content         String      @db.MediumText
  customCss       String?     @db.MediumText
  showOnDesktop   Boolean
  showOnMobile    Boolean
  createdAt       DateTime
  updatedAt       DateTime
  backgroundImage String?     @db.Char(30)
  client          String?     @db.Char(30)
  Media           Media?      @relation(fields: [backgroundImage], references: [id], onUpdate: Restrict, map: "FeaturedTile_ibfk_1")
  Client          Client?     @relation(fields: [client], references: [id], onUpdate: Restrict, map: "FeaturedTile_ibfk_2")
  Analytics       Analytics[]

  @@index([backgroundImage], map: "backgroundImage")
  @@index([client], map: "client")
}

model Game {
  id                         String                       @id @default(cuid()) @db.Char(30)
  status                     String                       @db.MediumText
  type                       String                       @db.MediumText
  name                       String                       @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  shortName                  String                       @unique(length: 191, map: "shortName_UNIQUE") @db.MediumText
  slug                       String                       @unique(length: 191, map: "slug_UNIQUE") @db.MediumText
  logoUrl                    String?                      @db.MediumText
  iconUrl                    String?                      @db.MediumText
  color                      String                       @db.MediumText
  createdAt                  DateTime
  updatedAt                  DateTime
  banner                     String?                      @db.Char(30)
  icon                       String?                      @db.Char(30)
  winner                     String?                      @db.Char(30)
  logo                       String?                      @db.Char(30)
  sponsorList                String?                      @db.Char(30)
  overview                   String?                      @db.Char(30)
  Media_Game_bannerToMedia   Media?                       @relation("Game_bannerToMedia", fields: [banner], references: [id], onUpdate: Restrict, map: "Game_ibfk_1")
  Media_Game_iconToMedia     Media?                       @relation("Game_iconToMedia", fields: [icon], references: [id], onUpdate: Restrict, map: "Game_ibfk_2")
  Media_Game_winnerToMedia   Media?                       @relation("Game_winnerToMedia", fields: [winner], references: [id], onUpdate: Restrict, map: "Game_ibfk_3")
  Media_Game_logoToMedia     Media?                       @relation("Game_logoToMedia", fields: [logo], references: [id], onUpdate: Restrict, map: "Game_ibfk_4")
  SponsorList                SponsorList?                 @relation(fields: [sponsorList], references: [id], onUpdate: Restrict, map: "Game_ibfk_5")
  Media_Game_overviewToMedia Media?                       @relation("Game_overviewToMedia", fields: [overview], references: [id], onUpdate: Restrict, map: "Game_ibfk_6")
  CarCategory                CarCategory[]
  CompetitionEvent           CompetitionEvent[]
  GameTile                   GameTile[]
  GameVariant                GameVariant[]
  NotificationGamePreference NotificationGamePreference[]
  Statistic                  Statistic[]

  @@index([banner], map: "banner")
  @@index([icon], map: "icon")
  @@index([logo], map: "logo")
  @@index([overview], map: "overview")
  @@index([sponsorList], map: "sponsorList")
  @@index([winner], map: "winner")
}

model GameTile {
  id              String            @id @default(cuid()) @db.Char(30)
  type            String            @db.MediumText
  winner          String            @db.MediumText
  createdAt       DateTime
  updatedAt       DateTime
  game            String?           @db.Char(30)
  Game            Game?             @relation(fields: [game], references: [id], onUpdate: Restrict, map: "GameTile_ibfk_1")
  WebsiteSettings WebsiteSettings[]

  @@index([game], map: "game")
}

model GameVariant {
  id                                             String             @id @default(cuid()) @db.Char(30)
  status                                         String             @db.MediumText
  teamSize                                       Int
  minTeamSize                                    Int
  reserves                                       Int
  hasCoach                                       Boolean?
  requiredGameId                                 String?            @db.MediumText
  createdAt                                      DateTime
  updatedAt                                      DateTime
  requiredSocialAccount                          String?            @db.Char(30)
  platform                                       String?            @db.Char(30)
  game                                           String?            @db.Char(30)
  SocialAccount                                  SocialAccount?     @relation(fields: [requiredSocialAccount], references: [id], onUpdate: Restrict, map: "GameVariant_ibfk_1")
  Platform                                       Platform?          @relation(fields: [platform], references: [id], onUpdate: Restrict, map: "GameVariant_ibfk_2")
  Game                                           Game?              @relation(fields: [game], references: [id], onUpdate: Restrict, map: "GameVariant_ibfk_3")
  CompetitionEvent_CompetitionEventToGameVariant CompetitionEvent[]
  Team                                           Team[]
  CompetitionEvent_CompetitionGameVariants       CompetitionEvent[] @relation("CompetitionGameVariants")

  @@index([game], map: "game")
  @@index([platform], map: "platform")
  @@index([requiredSocialAccount], map: "requiredSocialAccount")
}

model Giveaway {
  id                                   String           @id @default(cuid()) @db.Char(30)
  type                                 String           @db.MediumText
  status                               String           @db.MediumText
  name                                 String           @db.MediumText
  slug                                 String           @unique(length: 191, map: "slug_UNIQUE") @db.MediumText
  gleamLink                            String?          @db.MediumText
  emailContent                         String?          @db.MediumText
  emailHtml                            String?          @db.MediumText
  emailSubject                         String?          @db.MediumText
  createdAt                            DateTime
  updatedAt                            DateTime
  banner                               String?          @db.Char(30)
  terms                                String?          @db.Char(30)
  pageBackground                       String?          @db.Char(30)
  Media_Giveaway_bannerToMedia         Media?           @relation("Giveaway_bannerToMedia", fields: [banner], references: [id], onUpdate: Restrict, map: "Giveaway_ibfk_1")
  PageContent                          PageContent?     @relation(fields: [terms], references: [id], onUpdate: Restrict, map: "Giveaway_ibfk_2")
  Media_Giveaway_pageBackgroundToMedia Media?           @relation("Giveaway_pageBackgroundToMedia", fields: [pageBackground], references: [id], onUpdate: Restrict, map: "Giveaway_ibfk_3")
  GiveawayPrize                        GiveawayPrize[]
  GiveawayWinner                       GiveawayWinner[]

  @@index([banner], map: "banner")
  @@index([pageBackground], map: "pageBackground")
  @@index([terms], map: "terms")
}

model GiveawayPrize {
  id                String           @id @default(cuid()) @db.Char(30)
  type              String           @db.MediumText
  name              String           @db.MediumText
  numberOfWinners   Int
  description       String?          @db.MediumText
  voucherCode       String?          @db.MediumText
  leaderboardPoints String?          @db.MediumText
  createdAt         DateTime
  updatedAt         DateTime
  giveaway          String?          @db.Char(30)
  Giveaway          Giveaway?        @relation(fields: [giveaway], references: [id], onUpdate: Restrict, map: "GiveawayPrize_ibfk_1")
  GiveawayWinner    GiveawayWinner[]

  @@index([giveaway], map: "giveaway")
}

model GiveawayWinner {
  id            String         @id @default(cuid()) @db.Char(30)
  status        String         @db.MediumText
  email         String         @db.MediumText
  notified      DateTime?
  createdAt     DateTime
  updatedAt     DateTime
  prize         String?        @db.Char(30)
  bankAccount   String?        @db.Char(30)
  address       String?        @db.Char(30)
  giveaway      String?        @db.Char(30)
  user          String?        @db.Char(30)
  GiveawayPrize GiveawayPrize? @relation(fields: [prize], references: [id], onUpdate: Restrict, map: "GiveawayWinner_ibfk_1")
  BankAccount   BankAccount?   @relation(fields: [bankAccount], references: [id], onUpdate: Restrict, map: "GiveawayWinner_ibfk_2")
  Address       Address?       @relation(fields: [address], references: [id], onUpdate: Restrict, map: "GiveawayWinner_ibfk_3")
  Giveaway      Giveaway?      @relation(fields: [giveaway], references: [id], onUpdate: Restrict, map: "GiveawayWinner_ibfk_4")
  User          User?          @relation(fields: [user], references: [id], onUpdate: Restrict, map: "GiveawayWinner_ibfk_5")

  @@index([address], map: "address")
  @@index([bankAccount], map: "bankAccount")
  @@index([giveaway], map: "giveaway")
  @@index([prize], map: "prize")
  @@index([user], map: "user")
}

model HomepageEvent {
  id               String            @id @default(cuid()) @db.Char(30)
  order            Int
  createdAt        DateTime
  updatedAt        DateTime
  websiteSettings  String?           @db.Char(30)
  event            String?           @db.Char(30)
  WebsiteSettings  WebsiteSettings?  @relation(fields: [websiteSettings], references: [id], onUpdate: Restrict, map: "HomepageEvent_ibfk_1")
  CompetitionEvent CompetitionEvent? @relation(fields: [event], references: [id], onUpdate: Restrict, map: "HomepageEvent_ibfk_2")

  @@index([event], map: "event")
  @@index([websiteSettings], map: "websiteSettings")
}

model JobLog {
  id        String   @id @default(cuid()) @db.Char(30)
  status    String   @db.MediumText
  jobId     String   @db.MediumText
  error     String?  @db.MediumText
  createdAt DateTime
  updatedAt DateTime
}

model Lead {
  id        String   @id @default(cuid()) @db.Char(30)
  status    String   @db.MediumText
  tag       String   @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  User      User[]
}

model Leaderboard {
  id                          String                        @id @default(cuid()) @db.Char(30)
  status                      String                        @db.MediumText
  name                        String                        @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  slug                        String                        @unique(length: 191, map: "slug_UNIQUE") @db.MediumText
  multiplier                  Decimal?
  vipMultiplier               Decimal?
  primaryColor                String?                       @db.MediumText
  secondaryColor              String?                       @db.MediumText
  terms                       String?                       @db.MediumText
  createdAt                   DateTime
  updatedAt                   DateTime
  banner                      String?                       @db.Char(30)
  Media                       Media?                        @relation(fields: [banner], references: [id], onUpdate: Restrict, map: "Leaderboard_ibfk_1")
  LeaderboardUser             LeaderboardUser[]
  LeaderboardPointsAllocation LeaderboardPointsAllocation[]

  @@index([banner], map: "banner")
}

model LeaderboardPointsAllocation {
  id          String        @id @default(cuid()) @db.Char(30)
  name        String        @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  description String?       @db.MediumText
  points      Int
  createdAt   DateTime
  updatedAt   DateTime
  Leaderboard Leaderboard[]
}

model LeaderboardUser {
  id                   String                 @id @default(cuid()) @db.Char(30)
  totalPoints          Int?
  createdAt            DateTime
  updatedAt            DateTime
  leaderboard          String?                @db.Char(30)
  user                 String?                @db.Char(30)
  Leaderboard          Leaderboard?           @relation(fields: [leaderboard], references: [id], onUpdate: Restrict, map: "LeaderboardUser_ibfk_1")
  User                 User?                  @relation(fields: [user], references: [id], onUpdate: Restrict, map: "LeaderboardUser_ibfk_2")
  LeaderboardUserPoint LeaderboardUserPoint[]

  @@index([leaderboard], map: "leaderboard")
  @@index([user], map: "user")
}

model LeaderboardUserPoint {
  id              String           @id @default(cuid()) @db.Char(30)
  action          String           @db.MediumText
  actionId        String?          @db.MediumText
  points          Int
  description     String?          @db.MediumText
  createdAt       DateTime
  updatedAt       DateTime
  user            String?          @db.Char(30)
  LeaderboardUser LeaderboardUser? @relation(fields: [user], references: [id], onUpdate: Restrict, map: "LeaderboardUserPoint_ibfk_1")

  @@index([user], map: "user")
}

model Livery {
  id          String       @id @default(cuid()) @db.Char(30)
  logoUrl     String?      @db.MediumText
  number      Int
  createdAt   DateTime
  updatedAt   DateTime
  category    String?      @db.Char(30)
  logo        String?      @db.Char(30)
  make        String?      @db.Char(30)
  CarCategory CarCategory? @relation(fields: [category], references: [id], onUpdate: Restrict, map: "Livery_ibfk_1")
  Media       Media?       @relation(fields: [logo], references: [id], onUpdate: Restrict, map: "Livery_ibfk_2")
  CarMake     CarMake?     @relation(fields: [make], references: [id], onUpdate: Restrict, map: "Livery_ibfk_3")
  User        User[]       @relation("UserLiveries")

  @@index([category], map: "category")
  @@index([logo], map: "logo")
  @@index([make], map: "make")
}

model LogitechScore {
  id        String   @id @default(cuid()) @db.Char(30)
  name      String   @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  email     String   @unique(length: 191, map: "email_UNIQUE") @db.MediumText
  total     Int?
  createdAt DateTime
  updatedAt DateTime
}

model MatchTeamPrediction {
  id                   String                @id @default(cuid()) @db.Char(30)
  createdAt            DateTime
  updatedAt            DateTime
  team                 String?               @db.Char(30)
  user                 String?               @db.Char(30)
  CompetitionMatchTeam CompetitionMatchTeam? @relation(fields: [team], references: [id], onUpdate: Restrict, map: "MatchTeamPrediction_ibfk_1")
  User                 User?                 @relation(fields: [user], references: [id], onUpdate: Restrict, map: "MatchTeamPrediction_ibfk_2")

  @@index([team], map: "team")
  @@index([user], map: "user")
}

model Media {
  id                                                      String                  @id @default(cuid()) @db.Char(30)
  order                                                   Int
  title                                                   String?                 @db.MediumText
  relatedObjectId                                         String?                 @db.MediumText
  relatedObject                                           String?                 @db.MediumText
  relatedObjectField                                      String?                 @db.MediumText
  url                                                     String                  @db.MediumText
  thumbnailUrl                                            String?                 @db.MediumText
  transferred                                             Boolean
  createdAt                                               DateTime
  updatedAt                                               DateTime
  category                                                String?                 @db.Char(30)
  MediaCategory                                           MediaCategory?          @relation(fields: [category], references: [id], onUpdate: Restrict, map: "Media_ibfk_1")
  Advertisement                                           Advertisement[]
  Badge_Badge_fallbackLogoToMedia                         Badge[]                 @relation("Badge_fallbackLogoToMedia")
  Badge_Badge_logoToMedia                                 Badge[]                 @relation("Badge_logoToMedia")
  Blurb                                                   Blurb[]
  BlurbAuthor                                             BlurbAuthor[]
  Client                                                  Client[]
  Competition_Competition_pageBackgroundToMedia           Competition[]           @relation("Competition_pageBackgroundToMedia")
  Competition_Competition_overviewBannerToMedia           Competition[]           @relation("Competition_overviewBannerToMedia")
  Competition_Competition_tileBackgroundToMedia           Competition[]           @relation("Competition_tileBackgroundToMedia")
  Competition_Competition_gameSelectorLogoToMedia         Competition[]           @relation("Competition_gameSelectorLogoToMedia")
  Competition_Competition_gameLogoToMedia                 Competition[]           @relation("Competition_gameLogoToMedia")
  Competition_Competition_bannerToMedia                   Competition[]           @relation("Competition_bannerToMedia")
  CompetitionEvent_CompetitionEvent_signupBannerToMedia   CompetitionEvent[]      @relation("CompetitionEvent_signupBannerToMedia")
  CompetitionEvent_CompetitionEvent_gameLogoToMedia       CompetitionEvent[]      @relation("CompetitionEvent_gameLogoToMedia")
  CompetitionEvent_CompetitionEvent_overviewBannerToMedia CompetitionEvent[]      @relation("CompetitionEvent_overviewBannerToMedia")
  CompetitionEvent_CompetitionEvent_pageBackgroundToMedia CompetitionEvent[]      @relation("CompetitionEvent_pageBackgroundToMedia")
  CompetitionEvent_CompetitionEvent_bannerToMedia         CompetitionEvent[]      @relation("CompetitionEvent_bannerToMedia")
  CompetitionStage                                        CompetitionStage[]
  FeaturedTile                                            FeaturedTile[]
  Game_Game_bannerToMedia                                 Game[]                  @relation("Game_bannerToMedia")
  Game_Game_iconToMedia                                   Game[]                  @relation("Game_iconToMedia")
  Game_Game_winnerToMedia                                 Game[]                  @relation("Game_winnerToMedia")
  Game_Game_logoToMedia                                   Game[]                  @relation("Game_logoToMedia")
  Game_Game_overviewToMedia                               Game[]                  @relation("Game_overviewToMedia")
  Giveaway_Giveaway_bannerToMedia                         Giveaway[]              @relation("Giveaway_bannerToMedia")
  Giveaway_Giveaway_pageBackgroundToMedia                 Giveaway[]              @relation("Giveaway_pageBackgroundToMedia")
  Leaderboard                                             Leaderboard[]
  Livery                                                  Livery[]
  Notification                                            Notification[]
  Organisation_MediaToOrganisation_logo                   Organisation[]          @relation("MediaToOrganisation_logo")
  Organisation_MediaToOrganisation_banner                 Organisation[]          @relation("MediaToOrganisation_banner")
  Platform                                                Platform[]
  Slider                                                  Slider[]
  SocialAccount                                           SocialAccount[]
  Spinner                                                 Spinner[]
  SpinnerProduct                                          SpinnerProduct[]
  Sponsor                                                 Sponsor[]
  Streamer_MediaToStreamer_cardBack                       Streamer[]              @relation("MediaToStreamer_cardBack")
  Streamer_MediaToStreamer_cardFront                      Streamer[]              @relation("MediaToStreamer_cardFront")
  Survey_MediaToSurvey_popupBanner                        Survey[]                @relation("MediaToSurvey_popupBanner")
  Survey_MediaToSurvey_banner                             Survey[]                @relation("MediaToSurvey_banner")
  Team_MediaToTeam_banner                                 Team[]                  @relation("MediaToTeam_banner")
  Team_MediaToTeam_logo                                   Team[]                  @relation("MediaToTeam_logo")
  User_MediaToUser_banner                                 User[]                  @relation("MediaToUser_banner")
  User_MediaToUser_logo                                   User[]                  @relation("MediaToUser_logo")
  Voting                                                  Voting[]
  WithdrawForm                                            WithdrawForm[]
  BugReport                                               BugReport[]
  CompetitionMatch                                        CompetitionMatch[]
  CompetitionSubmission                                   CompetitionSubmission[]

  @@index([category], map: "category")
}

model MediaCategory {
  id        String   @id @default(cuid()) @db.Char(30)
  name      String   @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  Media     Media[]
}

model Message {
  id            String   @id @default(cuid()) @db.Char(30)
  isAnonymous   Boolean
  anonymousName String?  @db.MediumText
  content       String   @db.MediumText
  status        String   @db.MediumText
  createdAt     DateTime
  updatedAt     DateTime
  chat          String?  @db.Char(30)
  from          String?  @db.Char(30)
  Chat          Chat?    @relation(fields: [chat], references: [id], onUpdate: Restrict, map: "Message_ibfk_1")
  User          User?    @relation(fields: [from], references: [id], onUpdate: Restrict, map: "Message_ibfk_2")

  @@index([chat], map: "chat")
  @@index([from], map: "from")
}

model Mission {
  id                 String        @id @default(cuid()) @db.Char(30)
  status             String        @db.MediumText
  type               String        @db.MediumText
  order              Int
  slug               String        @unique(length: 191, map: "slug_UNIQUE") @db.MediumText
  task               String        @db.MediumText
  taskCount          Int
  triggerType        String        @db.MediumText
  triggerTypeFilter  String        @db.MediumText
  triggerTypeParam   String?       @db.MediumText
  triggerEvent       String        @db.MediumText
  triggerEventFilter String        @db.MediumText
  triggerEventParam  String?       @db.MediumText
  createdAt          DateTime
  updatedAt          DateTime
  parent             String?       @db.Char(30)
  badge              String?       @db.Char(30)
  Mission            Mission?      @relation("MissionToMission_parent", fields: [parent], references: [id], onUpdate: Restrict, map: "Mission_ibfk_1")
  Badge              Badge?        @relation(fields: [badge], references: [id], onUpdate: Restrict, map: "Mission_ibfk_2")
  other_Mission      Mission[]     @relation("MissionToMission_parent")
  UserMission        UserMission[]
  Mission_B          Mission[]     @relation("MissionUpgrades")
  Mission_A          Mission[]     @relation("MissionUpgrades")

  @@index([badge], map: "badge")
  @@index([parent], map: "parent")
}

model Notification {
  id        String   @id @default(cuid()) @db.Char(30)
  read      Boolean
  logoUrl   String?  @db.MediumText
  title     String   @db.MediumText
  content   String   @db.MediumText
  url       String   @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  user      String?  @db.Char(30)
  logo      String?  @db.Char(30)
  User      User?    @relation(fields: [user], references: [id], onUpdate: Restrict, map: "Notification_ibfk_1")
  Media     Media?   @relation(fields: [logo], references: [id], onUpdate: Restrict, map: "Notification_ibfk_2")

  @@index([logo], map: "logo")
  @@index([user], map: "user")
}

model NotificationGamePreference {
  id                     String                  @id @default(cuid()) @db.Char(30)
  inApp                  Boolean
  whatsapp               Boolean
  email                  Boolean
  createdAt              DateTime
  updatedAt              DateTime
  game                   String?                 @db.Char(30)
  notificationPreference String?                 @db.Char(30)
  Game                   Game?                   @relation(fields: [game], references: [id], onUpdate: Restrict, map: "NotificationGamePreference_ibfk_1")
  NotificationPreference NotificationPreference? @relation(fields: [notificationPreference], references: [id], onUpdate: Restrict, map: "NotificationGamePreference_ibfk_2")

  @@index([game], map: "game")
  @@index([notificationPreference], map: "notificationPreference")
}

model NotificationPreference {
  id                         String                       @id @default(cuid()) @db.Char(30)
  newGames                   Boolean
  newsletter                 Boolean
  createdAt                  DateTime
  updatedAt                  DateTime
  NotificationGamePreference NotificationGamePreference[]
  User                       User[]
}

model Organisation {
  id                                                                      String                      @id @default(cuid()) @db.Char(30)
  status                                                                  String                      @db.MediumText
  name                                                                    String                      @db.MediumText
  tag                                                                     String?                     @db.MediumText
  founded                                                                 String?                     @db.MediumText
  biography                                                               String?                     @db.MediumText
  facebookLink                                                            String?                     @db.MediumText
  twitterLink                                                             String?                     @db.MediumText
  instagramLink                                                           String?                     @db.MediumText
  youtubeLink                                                             String?                     @db.MediumText
  primaryColour                                                           String?                     @db.MediumText
  logoUrl                                                                 String?                     @db.MediumText
  acceptingJoinRequests                                                   Boolean?
  createdAt                                                               DateTime
  updatedAt                                                               DateTime
  logo                                                                    String?                     @db.Char(30)
  owner                                                                   String?                     @db.Char(30)
  banner                                                                  String?                     @db.Char(30)
  Media_MediaToOrganisation_logo                                          Media?                      @relation("MediaToOrganisation_logo", fields: [logo], references: [id], onUpdate: Restrict, map: "Organisation_ibfk_1")
  User_Organisation_ownerToUser                                           User?                       @relation("Organisation_ownerToUser", fields: [owner], references: [id], onUpdate: Restrict, map: "Organisation_ibfk_2")
  Media_MediaToOrganisation_banner                                        Media?                      @relation("MediaToOrganisation_banner", fields: [banner], references: [id], onUpdate: Restrict, map: "Organisation_ibfk_3")
  OrganisationInvite                                                      OrganisationInvite[]
  OrganisationJoinRequest                                                 OrganisationJoinRequest[]
  OrganisationSocialAccount                                               OrganisationSocialAccount[]
  Team                                                                    Team[]
  User_OrganisationToUser_organisation                                    User[]                      @relation("OrganisationToUser_organisation")
  UserInvite                                                              UserInvite[]
  Wallet                                                                  Wallet[]
  WalletTransaction_OrganisationToWalletTransaction_organisation          WalletTransaction[]         @relation("OrganisationToWalletTransaction_organisation")
  WalletTransaction_OrganisationToWalletTransaction_organisationRecipient WalletTransaction[]         @relation("OrganisationToWalletTransaction_organisationRecipient")
  Award                                                                   Award[]                     @relation("AwardOrganisations")
  Badge                                                                   Badge[]                     @relation("BadgeOrganisations")
  ActivityEvent                                                           ActivityEvent[]             @relation("OrganisationActivityEvents")

  @@index([banner], map: "banner")
  @@index([logo], map: "logo")
  @@index([owner], map: "owner")
}

model OrganisationInvite {
  id           String        @id @default(cuid()) @db.Char(30)
  email        String        @db.MediumText
  token        String?       @db.MediumText
  createdAt    DateTime
  updatedAt    DateTime
  organisation String?       @db.Char(30)
  user         String?       @db.Char(30)
  Organisation Organisation? @relation(fields: [organisation], references: [id], onUpdate: Restrict, map: "OrganisationInvite_ibfk_1")
  User         User?         @relation(fields: [user], references: [id], onUpdate: Restrict, map: "OrganisationInvite_ibfk_2")

  @@index([organisation], map: "organisation")
  @@index([user], map: "user")
}

model OrganisationJoinRequest {
  id           String        @id @default(cuid()) @db.Char(30)
  token        String?       @db.MediumText
  createdAt    DateTime
  updatedAt    DateTime
  organisation String?       @db.Char(30)
  user         String?       @db.Char(30)
  Organisation Organisation? @relation(fields: [organisation], references: [id], onUpdate: Restrict, map: "OrganisationJoinRequest_ibfk_1")
  User         User?         @relation(fields: [user], references: [id], onUpdate: Restrict, map: "OrganisationJoinRequest_ibfk_2")

  @@index([organisation], map: "organisation")
  @@index([user], map: "user")
}

model OrganisationSocialAccount {
  id            String         @id @default(cuid()) @db.Char(30)
  accountId     String?        @db.MediumText
  accountName   String?        @db.MediumText
  accountUrl    String?        @db.MediumText
  createdAt     DateTime
  updatedAt     DateTime
  organisation  String?        @db.Char(30)
  socialAccount String?        @db.Char(30)
  Organisation  Organisation?  @relation(fields: [organisation], references: [id], onUpdate: Restrict, map: "OrganisationSocialAccount_ibfk_1")
  SocialAccount SocialAccount? @relation(fields: [socialAccount], references: [id], onUpdate: Restrict, map: "OrganisationSocialAccount_ibfk_2")

  @@index([organisation], map: "organisation")
  @@index([socialAccount], map: "socialAccount")
}

model PageContent {
  id                                                          String             @id @default(cuid()) @db.Char(30)
  title                                                       String?            @db.MediumText
  body                                                        String             @db.MediumText
  customCss                                                   String?            @db.MediumText
  customJs                                                    String?            @db.MediumText
  createdAt                                                   DateTime
  updatedAt                                                   DateTime
  Competition_Competition_pageContentDraftToPageContent       Competition[]      @relation("Competition_pageContentDraftToPageContent")
  Competition_Competition_pageContentToPageContent            Competition[]      @relation("Competition_pageContentToPageContent")
  CompetitionEvent_CompetitionEvent_rulesContentToPageContent CompetitionEvent[] @relation("CompetitionEvent_rulesContentToPageContent")
  CompetitionEvent_CompetitionEvent_pageContentToPageContent  CompetitionEvent[] @relation("CompetitionEvent_pageContentToPageContent")
  Giveaway                                                    Giveaway[]
  Spinner_PageContentToSpinner_terms                          Spinner[]          @relation("PageContentToSpinner_terms")
  Spinner_PageContentToSpinner_howItWorks                     Spinner[]          @relation("PageContentToSpinner_howItWorks")
}

model PaymentMethod {
  id                         String                       @id @default(cuid()) @db.Char(30)
  isDefault                  Boolean
  binCountry                 String?                      @db.MediumText
  last4Digits                String?                      @db.MediumText
  holder                     String?                      @db.MediumText
  expiryMonth                String?                      @db.MediumText
  expiryYear                 String?                      @db.MediumText
  brand                      String?                      @db.MediumText
  createdAt                  DateTime
  updatedAt                  DateTime
  user                       String?                      @db.Char(30)
  User                       User?                        @relation(fields: [user], references: [id], onUpdate: Restrict, map: "PaymentMethod_ibfk_1")
  VipSubscriptionTransaction VipSubscriptionTransaction[]

  @@index([user], map: "user")
}

model Platform {
  id               String             @id @default(cuid()) @db.Char(30)
  name             String             @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  shortName        String             @unique(length: 191, map: "shortName_UNIQUE") @db.MediumText
  color            String?            @db.MediumText
  createdAt        DateTime
  updatedAt        DateTime
  icon             String?            @db.Char(30)
  Media            Media?             @relation(fields: [icon], references: [id], onUpdate: Restrict, map: "Platform_ibfk_1")
  GameVariant      GameVariant[]
  CompetitionEvent CompetitionEvent[] @relation("CompetitionPlatforms")

  @@index([icon], map: "icon")
}

model PlayerCompetitionRacingScore {
  id                                                                                       String                   @id @default(cuid()) @db.Char(30)
  time                                                                                     Int?
  createdAt                                                                                DateTime
  updatedAt                                                                                DateTime
  user                                                                                     String?                  @db.Char(30)
  User                                                                                     User?                    @relation(fields: [user], references: [id], onUpdate: Restrict, map: "PlayerCompetitionRacingScore_ibfk_1")
  CompetitionRacingScore_CompetitionRacingScore_player2ScoreToPlayerCompetitionRacingScore CompetitionRacingScore[] @relation("CompetitionRacingScore_player2ScoreToPlayerCompetitionRacingScore")
  CompetitionRacingScore_CompetitionRacingScore_player1ScoreToPlayerCompetitionRacingScore CompetitionRacingScore[] @relation("CompetitionRacingScore_player1ScoreToPlayerCompetitionRacingScore")

  @@index([user], map: "user")
}

model PlayerCompetitionRoyaleScore {
  id                                                                                       String                   @id @default(cuid()) @db.Char(30)
  position                                                                                 Int?
  kills                                                                                    Int?
  damage                                                                                   Int?
  createdAt                                                                                DateTime
  updatedAt                                                                                DateTime
  user                                                                                     String?                  @db.Char(30)
  User                                                                                     User?                    @relation(fields: [user], references: [id], onUpdate: Restrict, map: "PlayerCompetitionRoyaleScore_ibfk_1")
  CompetitionRoyaleScore_CompetitionRoyaleScore_player3ScoreToPlayerCompetitionRoyaleScore CompetitionRoyaleScore[] @relation("CompetitionRoyaleScore_player3ScoreToPlayerCompetitionRoyaleScore")
  CompetitionRoyaleScore_CompetitionRoyaleScore_player2ScoreToPlayerCompetitionRoyaleScore CompetitionRoyaleScore[] @relation("CompetitionRoyaleScore_player2ScoreToPlayerCompetitionRoyaleScore")
  CompetitionRoyaleScore_CompetitionRoyaleScore_player1ScoreToPlayerCompetitionRoyaleScore CompetitionRoyaleScore[] @relation("CompetitionRoyaleScore_player1ScoreToPlayerCompetitionRoyaleScore")
  CompetitionRoyaleScore_CompetitionRoyaleScore_player5ScoreToPlayerCompetitionRoyaleScore CompetitionRoyaleScore[] @relation("CompetitionRoyaleScore_player5ScoreToPlayerCompetitionRoyaleScore")
  CompetitionRoyaleScore_CompetitionRoyaleScore_player4ScoreToPlayerCompetitionRoyaleScore CompetitionRoyaleScore[] @relation("CompetitionRoyaleScore_player4ScoreToPlayerCompetitionRoyaleScore")

  @@index([user], map: "user")
}

model Popup {
  id               String             @id @default(cuid()) @db.Char(30)
  status           String             @db.MediumText
  type             String             @db.MediumText
  name             String             @db.MediumText
  repeat           Int?
  repeatUnit       String?            @db.MediumText
  startDate        DateTime?
  endDate          DateTime?
  body             String?            @db.MediumText
  css              String?            @db.MediumText
  showTo           String?            @db.MediumText
  createdAt        DateTime
  updatedAt        DateTime
  CompetitionEvent CompetitionEvent[]
  PopupLog         PopupLog[]
}

model PopupLog {
  id            String   @id @default(cuid()) @db.Char(30)
  dontShowAgain Boolean
  createdAt     DateTime
  updatedAt     DateTime
  user          String?  @db.Char(30)
  User          User?    @relation(fields: [user], references: [id], onUpdate: Restrict, map: "PopupLog_ibfk_1")
  Popup         Popup[]

  @@index([user], map: "user")
}

model Prize {
  id           String     @id @default(cuid()) @db.Char(30)
  placement    Int?
  share        Int?
  otherShare   String?    @db.MediumText
  premiumShare String?    @db.MediumText
  createdAt    DateTime
  updatedAt    DateTime
  pool         String?    @db.Char(30)
  team         String?    @db.Char(30)
  PrizePool    PrizePool? @relation(fields: [pool], references: [id], onUpdate: Restrict, map: "Prize_ibfk_1")
  Team         Team?      @relation(fields: [team], references: [id], onUpdate: Restrict, map: "Prize_ibfk_2")

  @@index([pool], map: "pool")
  @@index([team], map: "team")
}

model PrizePool {
  id                       String             @id @default(cuid()) @db.Char(30)
  total                    Int?
  otherTotal               String?            @db.MediumText
  currencySymbol           String?            @db.MediumText
  paymentClientSameAsEvent Boolean
  createdAt                DateTime
  updatedAt                DateTime
  client                   String?            @db.Char(30)
  Client                   Client?            @relation(fields: [client], references: [id], onUpdate: Restrict, map: "PrizePool_ibfk_1")
  CompetitionEvent         CompetitionEvent[]
  Prize                    Prize[]

  @@index([client], map: "client")
}

model Realm {
  id        String   @id @default(cuid()) @db.Char(30)
  name      String   @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  slug      String   @db.MediumText
  url       String   @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  Blurb     Blurb[]  @relation("BlurbRealms")
  Slider    Slider[] @relation("SliderRealms")
}

model Recipient {
  id        String    @id @default(cuid()) @db.Char(30)
  status    String    @db.MediumText
  opened    Boolean?
  bounce    Boolean?
  createdAt DateTime
  updatedAt DateTime
  campaign  String?   @db.Char(30)
  user      String?   @db.Char(30)
  Campaign  Campaign? @relation(fields: [campaign], references: [id], onUpdate: Restrict, map: "Recipient_ibfk_1")
  User      User?     @relation(fields: [user], references: [id], onUpdate: Restrict, map: "Recipient_ibfk_2")

  @@index([campaign], map: "campaign")
  @@index([user], map: "user")
}

model Role {
  id          String        @id @default(cuid()) @db.Char(30)
  name        String        @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  isDefault   Boolean
  User        User[]
  Competition Competition[]
}

model Rule {
  id        String    @id @default(cuid()) @db.Char(30)
  index     Decimal
  content   String?   @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  Rule_B    Rule[]    @relation("RuleToRule")
  Rule_A    Rule[]    @relation("RuleToRule")
  RuleSet   RuleSet[]
}

model RuleSet {
  id        String   @id @default(cuid()) @db.Char(30)
  name      String   @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  Rule      Rule[]
}

model RulesTemplate {
  id        String   @id @default(cuid()) @db.Char(30)
  name      String   @db.MediumText
  content   String   @db.MediumText
  createdAt DateTime
  updatedAt DateTime
}

model Schedule {
  id                                  String             @id @default(cuid()) @db.Char(30)
  status                              String             @db.MediumText
  scheduledDate                       DateTime
  createdAt                           DateTime
  updatedAt                           DateTime
  declinedBy                          String?            @db.Char(30)
  acceptedBy                          String?            @db.Char(30)
  scheduledByUser                     String?            @db.Char(30)
  scheduledByTeam                     String?            @db.Char(30)
  User_Schedule_declinedByToUser      User?              @relation("Schedule_declinedByToUser", fields: [declinedBy], references: [id], onUpdate: Restrict, map: "Schedule_ibfk_1")
  User_Schedule_acceptedByToUser      User?              @relation("Schedule_acceptedByToUser", fields: [acceptedBy], references: [id], onUpdate: Restrict, map: "Schedule_ibfk_2")
  User_Schedule_scheduledByUserToUser User?              @relation("Schedule_scheduledByUserToUser", fields: [scheduledByUser], references: [id], onUpdate: Restrict, map: "Schedule_ibfk_3")
  Team                                Team?              @relation(fields: [scheduledByTeam], references: [id], onUpdate: Restrict, map: "Schedule_ibfk_4")
  CompetitionMatch                    CompetitionMatch[]

  @@index([acceptedBy], map: "acceptedBy")
  @@index([declinedBy], map: "declinedBy")
  @@index([scheduledByTeam], map: "scheduledByTeam")
  @@index([scheduledByUser], map: "scheduledByUser")
}

model ShortenedLink {
  id                    String                  @id @default(cuid()) @db.Char(30)
  url                   String                  @db.MediumText
  hash                  String                  @unique(length: 191, map: "hash_UNIQUE") @db.MediumText
  referral              String?                 @db.MediumText
  clicks                Int?
  createdAt             DateTime
  updatedAt             DateTime
  CompetitionSubmission CompetitionSubmission[]
}

model SiteSetting {
  id        String   @id @default(cuid()) @db.Char(30)
  key       String   @unique(length: 191, map: "key_UNIQUE") @db.MediumText
  value     String   @db.MediumText
  createdAt DateTime
  updatedAt DateTime
}

model Slider {
  id             String           @id @default(cuid()) @db.Char(30)
  status         String           @db.MediumText
  order          Int?
  name           String           @db.MediumText
  customCSS      String?          @db.MediumText
  customHTML     String?          @db.MediumText
  showOnDesktop  Boolean
  showOnMobile   Boolean
  createdAt      DateTime
  updatedAt      DateTime
  background     String?          @db.Char(30)
  client         String?          @db.Char(30)
  Media          Media?           @relation(fields: [background], references: [id], onUpdate: Restrict, map: "Slider_ibfk_1")
  Client         Client?          @relation(fields: [client], references: [id], onUpdate: Restrict, map: "Slider_ibfk_2")
  Slider_actions Slider_actions[]
  Analytics      Analytics[]
  Realm          Realm[]          @relation("SliderRealms")

  @@index([background], map: "background")
  @@index([client], map: "client")
}

model Slider_actions {
  nodeId   String @db.Char(30)
  position Int
  value    String @db.MediumText
  Slider   Slider @relation(fields: [nodeId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "Slider_actions_ibfk_1")

  @@id([nodeId, position])
  @@index([value(length: 191)], map: "value")
}

model SocialAccount {
  id                        String                      @id @default(cuid()) @db.Char(30)
  color                     String                      @db.MediumText
  linkType                  String                      @db.MediumText
  name                      String                      @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  accountType               String                      @db.MediumText
  createdAt                 DateTime
  updatedAt                 DateTime
  icon                      String?                     @db.Char(30)
  Media                     Media?                      @relation(fields: [icon], references: [id], onUpdate: Restrict, map: "SocialAccount_ibfk_1")
  GameVariant               GameVariant[]
  OrganisationSocialAccount OrganisationSocialAccount[]
  TeamSocialAccount         TeamSocialAccount[]
  UserSocialAccount         UserSocialAccount[]

  @@index([icon], map: "icon")
}

model SocialShare {
  id          String       @id @default(cuid()) @db.Char(30)
  platform    String       @db.MediumText
  moment      String       @db.MediumText
  momentId    String       @db.MediumText
  callbackUrl String       @db.MediumText
  createdAt   DateTime
  updatedAt   DateTime
  user        String?      @db.Char(30)
  User        User?        @relation(fields: [user], references: [id], onUpdate: Restrict, map: "SocialShare_ibfk_1")
  WinnerForm  WinnerForm[]

  @@index([user], map: "user")
}

model Spinner {
  id                                          String                  @id @default(cuid()) @db.Char(30)
  status                                      String                  @db.MediumText
  name                                        String                  @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  pricePerSpin                                Int
  createdAt                                   DateTime
  updatedAt                                   DateTime
  terms                                       String?                 @db.Char(30)
  logo                                        String?                 @db.Char(30)
  howItWorks                                  String?                 @db.Char(30)
  PageContent_PageContentToSpinner_terms      PageContent?            @relation("PageContentToSpinner_terms", fields: [terms], references: [id], onUpdate: Restrict, map: "Spinner_ibfk_1")
  Media                                       Media?                  @relation(fields: [logo], references: [id], onUpdate: Restrict, map: "Spinner_ibfk_2")
  PageContent_PageContentToSpinner_howItWorks PageContent?            @relation("PageContentToSpinner_howItWorks", fields: [howItWorks], references: [id], onUpdate: Restrict, map: "Spinner_ibfk_3")
  SpinnerWinner                               SpinnerWinner[]
  AdvertisementCampaign                       AdvertisementCampaign[] @relation("SpinnerAdvertismentCampaigns")
  SpinnerProduct                              SpinnerProduct[]        @relation("SpinnerProducts")

  @@index([howItWorks], map: "howItWorks")
  @@index([logo], map: "logo")
  @@index([terms], map: "terms")
}

model SpinnerProduct {
  id                    String                  @id @default(cuid()) @db.Char(30)
  type                  String                  @db.MediumText
  status                String                  @db.MediumText
  name                  String                  @db.MediumText
  description           String?                 @db.MediumText
  dropRate              Decimal
  rarity                String                  @db.MediumText
  stock                 Int
  retailValue           String                  @db.MediumText
  createdAt             DateTime
  updatedAt             DateTime
  client                String?                 @db.Char(30)
  logo                  String?                 @db.Char(30)
  Client                Client?                 @relation(fields: [client], references: [id], onUpdate: Restrict, map: "SpinnerProduct_ibfk_1")
  Media                 Media?                  @relation(fields: [logo], references: [id], onUpdate: Restrict, map: "SpinnerProduct_ibfk_2")
  SpinnerProductDigital SpinnerProductDigital[]
  SpinnerWinner         SpinnerWinner[]
  AuditLog              AuditLog[]              @relation("SpinnerProductLogs")
  Spinner               Spinner[]               @relation("SpinnerProducts")

  @@index([client], map: "client")
  @@index([logo], map: "logo")
}

model SpinnerProductDigital {
  id             String          @id @default(cuid()) @db.Char(30)
  code           String          @db.MediumText
  claimed        Boolean
  claimedAt      DateTime?
  createdAt      DateTime
  updatedAt      DateTime
  product        String?         @db.Char(30)
  SpinnerProduct SpinnerProduct? @relation(fields: [product], references: [id], onUpdate: Restrict, map: "SpinnerProductDigital_ibfk_1")
  SpinnerWinner  SpinnerWinner[]

  @@index([product], map: "product")
}

model SpinnerTransaction {
  id            String          @id @default(cuid()) @db.Char(30)
  type          String          @db.MediumText
  description   String?         @db.MediumText
  amount        Int
  createdAt     DateTime
  updatedAt     DateTime
  user          String?         @db.Char(30)
  createdBy     String?         @db.Char(30)
  SpinnerUser   SpinnerUser?    @relation(fields: [user], references: [id], onUpdate: Restrict, map: "SpinnerTransaction_ibfk_1")
  User          User?           @relation(fields: [createdBy], references: [id], onUpdate: Restrict, map: "SpinnerTransaction_ibfk_2")
  SpinnerWinner SpinnerWinner[]

  @@index([createdBy], map: "createdBy")
  @@index([user], map: "user")
}

model SpinnerUser {
  id                 String               @id @default(cuid()) @db.Char(30)
  lastSpin           DateTime?
  availableSpins     Int
  createdAt          DateTime
  updatedAt          DateTime
  SpinnerTransaction SpinnerTransaction[]
  SpinnerWinner      SpinnerWinner[]
  User               User[]
}

model SpinnerWinner {
  id                    String                 @id @default(cuid()) @db.Char(30)
  status                String                 @db.MediumText
  type                  String                 @db.MediumText
  size                  String?                @db.MediumText
  variant               String?                @db.MediumText
  trackingNumber        String?                @db.MediumText
  trackingLink          String?                @db.MediumText
  orderReference        String?                @db.MediumText
  claimed               Boolean
  claimedAt             DateTime?
  createdAt             DateTime
  updatedAt             DateTime
  spinner               String?                @db.Char(30)
  digitalProduct        String?                @db.Char(30)
  product               String?                @db.Char(30)
  address               String?                @db.Char(30)
  transaction           String?                @db.Char(30)
  user                  String?                @db.Char(30)
  Spinner               Spinner?               @relation(fields: [spinner], references: [id], onUpdate: Restrict, map: "SpinnerWinner_ibfk_1")
  spinnerProductDigital SpinnerProductDigital? @relation(fields: [digitalProduct], references: [id], onUpdate: Restrict, map: "SpinnerWinner_ibfk_2")
  spinnerProduct        SpinnerProduct?        @relation(fields: [product], references: [id], onUpdate: Restrict, map: "SpinnerWinner_ibfk_3")
  Address               Address?               @relation(fields: [address], references: [id], onUpdate: Restrict, map: "SpinnerWinner_ibfk_4")
  spinnerTransaction    SpinnerTransaction?    @relation(fields: [transaction], references: [id], onUpdate: Restrict, map: "SpinnerWinner_ibfk_5")
  spinnerUser           SpinnerUser?           @relation(fields: [user], references: [id], onUpdate: Restrict, map: "SpinnerWinner_ibfk_6")

  @@index([address], map: "address")
  @@index([digitalProduct], map: "digitalProduct")
  @@index([product], map: "product")
  @@index([spinner], map: "spinner")
  @@index([transaction], map: "transaction")
  @@index([user], map: "user")
}

model Sponsor {
  id          String        @id @default(cuid()) @db.Char(30)
  order       Int
  name        String        @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  websiteUrl  String        @db.MediumText
  logoUrl     String?       @db.MediumText
  createdAt   DateTime
  updatedAt   DateTime
  logo        String?       @db.Char(30)
  Media       Media?        @relation(fields: [logo], references: [id], onUpdate: Restrict, map: "Sponsor_ibfk_1")
  SponsorList SponsorList[]

  @@index([logo], map: "logo")
}

model SponsorList {
  id           String         @id @default(cuid()) @db.Char(30)
  name         String         @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  createdAt    DateTime
  updatedAt    DateTime
  Announcement Announcement[]
  Competition  Competition[]
  Game         Game[]
  Sponsor      Sponsor[]
}

model Statistic {
  id                  String   @id @default(cuid()) @db.Char(30)
  name                String   @db.MediumText
  value               Int
  createdAt           DateTime
  updatedAt           DateTime
  game                String?  @db.Char(30)
  Game                Game?    @relation(fields: [game], references: [id], onUpdate: Restrict, map: "Statistic_ibfk_1")
  User_StatisticUser  User[]   @relation("StatisticUser")
  User_UserStatistics User[]   @relation("UserStatistics")

  @@index([game], map: "game")
}

model Streamer {
  id                              String             @id @default(cuid()) @db.Char(30)
  name                            String             @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  slug                            String             @unique(length: 191, map: "slug_UNIQUE") @db.MediumText
  platform                        String             @db.MediumText
  email                           String?            @db.MediumText
  description                     String?            @db.MediumText
  facebookLink                    String?            @db.MediumText
  twitterLink                     String?            @db.MediumText
  instagramLink                   String?            @db.MediumText
  youtubeLink                     String?            @db.MediumText
  twitchLink                      String?            @db.MediumText
  createdAt                       DateTime
  updatedAt                       DateTime
  cardBack                        String?            @db.Char(30)
  cardFront                       String?            @db.Char(30)
  user                            String?            @db.Char(30)
  Media_MediaToStreamer_cardBack  Media?             @relation("MediaToStreamer_cardBack", fields: [cardBack], references: [id], onUpdate: Restrict, map: "Streamer_ibfk_1")
  Media_MediaToStreamer_cardFront Media?             @relation("MediaToStreamer_cardFront", fields: [cardFront], references: [id], onUpdate: Restrict, map: "Streamer_ibfk_2")
  User_StreamerToUser             User?              @relation(fields: [user], references: [id], onUpdate: Restrict, map: "Streamer_ibfk_3")
  StreamerTag                     StreamerTag[]      @relation("StreamerTags")
  StreamerSchedule                StreamerSchedule[]
  User_StreamerVoters             User[]             @relation("StreamerVoters")

  @@index([cardBack], map: "cardBack")
  @@index([cardFront], map: "cardFront")
  @@index([user], map: "user")
}

model StreamerApplication {
  id            String   @id @default(cuid()) @db.Char(30)
  status        String   @db.MediumText
  declineReason String?  @db.MediumText
  email         String   @db.MediumText
  name          String   @db.MediumText
  channelLink   String   @db.MediumText
  over16        Boolean
  titles        String   @db.MediumText
  reason        String   @db.MediumText
  goals         String   @db.MediumText
  createdAt     DateTime
  updatedAt     DateTime
}

model StreamerSchedule {
  id        String     @id @default(cuid()) @db.Char(30)
  game      String     @db.MediumText
  day       String     @db.MediumText
  startTime String     @db.MediumText
  endTime   String     @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  Streamer  Streamer[]
}

model StreamerTag {
  id        String     @id @default(cuid()) @db.Char(30)
  name      String     @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  Streamer  Streamer[] @relation("StreamerTags")
}

model Survey {
  id                              String              @id @default(cuid()) @db.Char(30)
  status                          String              @db.MediumText
  name                            String              @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  slug                            String              @unique(length: 191, map: "slug_UNIQUE") @db.MediumText
  description                     String?             @db.MediumText
  endCondition                    String              @db.MediumText
  startAt                         DateTime?
  endAt                           DateTime?
  fulfillmentTarget               Int?
  createdAt                       DateTime
  updatedAt                       DateTime
  popupBanner                     String?             @db.Char(30)
  banner                          String?             @db.Char(30)
  Media_MediaToSurvey_popupBanner Media?              @relation("MediaToSurvey_popupBanner", fields: [popupBanner], references: [id], onUpdate: Restrict, map: "Survey_ibfk_1")
  Media_MediaToSurvey_banner      Media?              @relation("MediaToSurvey_banner", fields: [banner], references: [id], onUpdate: Restrict, map: "Survey_ibfk_2")
  SurveyFulfillment               SurveyFulfillment[]
  SurveyQuestion                  SurveyQuestion[]

  @@index([banner], map: "banner")
  @@index([popupBanner], map: "popupBanner")
}

model SurveyAnswer {
  id                String             @id @default(cuid()) @db.Char(30)
  answer            String             @db.MediumText
  createdAt         DateTime
  updatedAt         DateTime
  fulfillment       String?            @db.Char(30)
  question          String?            @db.Char(30)
  SurveyFulfillment SurveyFulfillment? @relation(fields: [fulfillment], references: [id], onUpdate: Restrict, map: "SurveyAnswer_ibfk_1")
  SurveyQuestion    SurveyQuestion?    @relation(fields: [question], references: [id], onUpdate: Restrict, map: "SurveyAnswer_ibfk_2")

  @@index([fulfillment], map: "fulfillment")
  @@index([question], map: "question")
}

model SurveyFulfillment {
  id           String         @id @default(cuid()) @db.Char(30)
  createdAt    DateTime
  updatedAt    DateTime
  survey       String?        @db.Char(30)
  user         String?        @db.Char(30)
  Survey       Survey?        @relation(fields: [survey], references: [id], onUpdate: Restrict, map: "SurveyFulfillment_ibfk_1")
  User         User?          @relation(fields: [user], references: [id], onUpdate: Restrict, map: "SurveyFulfillment_ibfk_2")
  SurveyAnswer SurveyAnswer[]

  @@index([survey], map: "survey")
  @@index([user], map: "user")
}

model SurveyQuestion {
  id           String         @id @default(cuid()) @db.Char(30)
  type         String         @db.MediumText
  inputType    String?        @db.MediumText
  label        String         @db.MediumText
  answers      String         @db.MediumText
  createdAt    DateTime
  updatedAt    DateTime
  survey       String?        @db.Char(30)
  Survey       Survey?        @relation(fields: [survey], references: [id], onUpdate: Restrict, map: "SurveyQuestion_ibfk_1")
  SurveyAnswer SurveyAnswer[]

  @@index([survey], map: "survey")
}

model Tag {
  id        String     @id @default(cuid()) @db.Char(30)
  name      String     @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  Campaign  Campaign[]
}

model Team {
  id                                                              String                     @id @default(cuid()) @db.Char(30)
  status                                                          String                     @db.MediumText
  type                                                            String?                    @db.MediumText
  name                                                            String                     @db.MediumText
  tag                                                             String?                    @db.MediumText
  facebookLink                                                    String?                    @db.MediumText
  twitterLink                                                     String?                    @db.MediumText
  instagramLink                                                   String?                    @db.MediumText
  youtubeLink                                                     String?                    @db.MediumText
  primaryColour                                                   String?                    @db.MediumText
  logoUrl                                                         String?                    @db.MediumText
  useOrgLogo                                                      Boolean?
  seed                                                            Int?
  faceitId                                                        String?                    @db.MediumText
  region                                                          String?                    @db.MediumText
  intelDump                                                       String?                    @db.MediumText
  createdAt                                                       DateTime
  updatedAt                                                       DateTime
  racingClass                                                     String?                    @db.Char(30)
  owner                                                           String?                    @db.Char(30)
  gameVariant                                                     String?                    @db.Char(30)
  organisation                                                    String?                    @db.Char(30)
  banner                                                          String?                    @db.Char(30)
  logo                                                            String?                    @db.Char(30)
  CarCategory                                                     CarCategory?               @relation(fields: [racingClass], references: [id], onUpdate: Restrict, map: "Team_ibfk_1")
  User_TeamToUser                                                 User?                      @relation(fields: [owner], references: [id], onUpdate: Restrict, map: "Team_ibfk_2")
  GameVariant                                                     GameVariant?               @relation(fields: [gameVariant], references: [id], onUpdate: Restrict, map: "Team_ibfk_3")
  Organisation                                                    Organisation?              @relation(fields: [organisation], references: [id], onUpdate: Restrict, map: "Team_ibfk_4")
  Media_MediaToTeam_banner                                        Media?                     @relation("MediaToTeam_banner", fields: [banner], references: [id], onUpdate: Restrict, map: "Team_ibfk_5")
  Media_MediaToTeam_logo                                          Media?                     @relation("MediaToTeam_logo", fields: [logo], references: [id], onUpdate: Restrict, map: "Team_ibfk_6")
  CompetitionEventSchedule_CompetitionEventSchedule_team1ToTeam   CompetitionEventSchedule[] @relation("CompetitionEventSchedule_team1ToTeam")
  CompetitionEventSchedule_CompetitionEventSchedule_team2ToTeam   CompetitionEventSchedule[] @relation("CompetitionEventSchedule_team2ToTeam")
  CompetitionMatchTeam_CompetitionMatchTeam_submittedByTeamToTeam CompetitionMatchTeam[]     @relation("CompetitionMatchTeam_submittedByTeamToTeam")
  CompetitionMatchTeam_CompetitionMatchTeam_acceptedByTeamToTeam  CompetitionMatchTeam[]     @relation("CompetitionMatchTeam_acceptedByTeamToTeam")
  CompetitionTeam                                                 CompetitionTeam[]
  Dispute                                                         Dispute[]
  Prize                                                           Prize[]
  Schedule                                                        Schedule[]
  TeamInvite                                                      TeamInvite[]
  TeamJoinRequest                                                 TeamJoinRequest[]
  TeamPlayer                                                      TeamPlayer[]
  TeamSocialAccount                                               TeamSocialAccount[]
  Team_altNames                                                   Team_altNames[]
  Wallet                                                          Wallet[]
  WalletTransaction_TeamToWalletTransaction_teamRecipient         WalletTransaction[]        @relation("TeamToWalletTransaction_teamRecipient")
  WalletTransaction_TeamToWalletTransaction_team                  WalletTransaction[]        @relation("TeamToWalletTransaction_team")
  WinnerForm                                                      WinnerForm[]
  AuditLog                                                        AuditLog[]
  Award                                                           Award[]                    @relation("AwardTeams")
  Badge                                                           Badge[]                    @relation("BadgeTeams")
  ActivityEvent                                                   ActivityEvent[]            @relation("TeamActivityEvents")
  User_UserTeams                                                  User[]                     @relation("UserTeams")

  @@index([banner], map: "banner")
  @@index([gameVariant], map: "gameVariant")
  @@index([logo], map: "logo")
  @@index([organisation], map: "organisation")
  @@index([owner], map: "owner")
  @@index([racingClass], map: "racingClass")
}

model TeamInvite {
  id        String   @id @default(cuid()) @db.Char(30)
  email     String   @db.MediumText
  token     String?  @db.MediumText
  position  Int?
  role      String   @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  team      String?  @db.Char(30)
  user      String?  @db.Char(30)
  Team      Team?    @relation(fields: [team], references: [id], onUpdate: Restrict, map: "TeamInvite_ibfk_1")
  User      User?    @relation(fields: [user], references: [id], onUpdate: Restrict, map: "TeamInvite_ibfk_2")

  @@index([team], map: "team")
  @@index([user], map: "user")
}

model TeamJoinRequest {
  id        String   @id @default(cuid()) @db.Char(30)
  token     String?  @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  user      String?  @db.Char(30)
  team      String?  @db.Char(30)
  User      User?    @relation(fields: [user], references: [id], onUpdate: Restrict, map: "TeamJoinRequest_ibfk_1")
  Team      Team?    @relation(fields: [team], references: [id], onUpdate: Restrict, map: "TeamJoinRequest_ibfk_2")

  @@index([team], map: "team")
  @@index([user], map: "user")
}

model TeamPlayer {
  id        String   @id @default(cuid()) @db.Char(30)
  position  Int?
  role      String?  @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  user      String?  @db.Char(30)
  team      String?  @db.Char(30)
  User      User?    @relation(fields: [user], references: [id], onUpdate: Restrict, map: "TeamPlayer_ibfk_1")
  Team      Team?    @relation(fields: [team], references: [id], onUpdate: Restrict, map: "TeamPlayer_ibfk_2")

  @@index([team], map: "team")
  @@index([user], map: "user")
}

model TeamSocialAccount {
  id            String         @id @default(cuid()) @db.Char(30)
  accountId     String?        @db.MediumText
  accountName   String?        @db.MediumText
  accountUrl    String?        @db.MediumText
  createdAt     DateTime
  updatedAt     DateTime
  socialAccount String?        @db.Char(30)
  team          String?        @db.Char(30)
  SocialAccount SocialAccount? @relation(fields: [socialAccount], references: [id], onUpdate: Restrict, map: "TeamSocialAccount_ibfk_1")
  Team          Team?          @relation(fields: [team], references: [id], onUpdate: Restrict, map: "TeamSocialAccount_ibfk_2")

  @@index([socialAccount], map: "socialAccount")
  @@index([team], map: "team")
}

model Team_altNames {
  nodeId   String @db.Char(30)
  position Int
  value    String @db.MediumText
  Team     Team   @relation(fields: [nodeId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "Team_altNames_ibfk_1")

  @@id([nodeId, position])
  @@index([value(length: 191)], map: "value")
}

model Timeline {
  id            String          @id @default(cuid()) @db.Char(30)
  createdAt     DateTime
  updatedAt     DateTime
  TimelinePoint TimelinePoint[]
}

model TimelinePoint {
  id         String     @id @default(cuid()) @db.Char(30)
  date       DateTime
  label      String?    @db.MediumText
  shortLabel String?    @db.MediumText
  createdAt  DateTime
  updatedAt  DateTime
  Timeline   Timeline[]
}

model User {
  id                                                              String                         @id @default(cuid()) @db.Char(30)
  status                                                          String                         @db.MediumText
  authToken                                                       String?                        @db.MediumText
  primaryColour                                                   String?                        @db.MediumText
  logoUrl                                                         String?                        @db.MediumText
  tempAvatar                                                      String?                        @db.MediumText
  firstName                                                       String?                        @db.MediumText
  lastName                                                        String?                        @db.MediumText
  displayName                                                     String                         @db.MediumText
  displayNameChangedAt                                            DateTime?
  cellNumber                                                      String?                        @db.MediumText
  idNumber                                                        String?                        @db.MediumText
  dateOfBirth                                                     DateTime?
  gender                                                          String?                        @db.MediumText
  province                                                        String?                        @db.MediumText
  country                                                         String?                        @db.MediumText
  email                                                           String                         @unique(length: 191, map: "email_UNIQUE") @db.MediumText
  emailConfirmed                                                  Boolean
  confirmEmailToken                                               String?                        @unique(length: 191, map: "confirmEmailToken_UNIQUE") @db.MediumText
  password                                                        String                         @db.MediumText
  resetPasswordToken                                              String?                        @unique(length: 191, map: "resetPasswordToken_UNIQUE") @db.MediumText
  resetPasswordExpires                                            Decimal?
  facebookLink                                                    String?                        @db.MediumText
  twitterLink                                                     String?                        @db.MediumText
  instagramLink                                                   String?                        @db.MediumText
  youtubeLink                                                     String?                        @db.MediumText
  twitchLink                                                      String?                        @db.MediumText
  facebookId                                                      String?                        @unique(length: 191, map: "facebookId_UNIQUE") @db.MediumText
  twitterId                                                       String?                        @unique(length: 191, map: "twitterId_UNIQUE") @db.MediumText
  instagramId                                                     String?                        @unique(length: 191, map: "instagramId_UNIQUE") @db.MediumText
  youtubeId                                                       String?                        @unique(length: 191, map: "youtubeId_UNIQUE") @db.MediumText
  twitchId                                                        String?                        @unique(length: 191, map: "twitchId_UNIQUE") @db.MediumText
  googleId                                                        String?                        @unique(length: 191, map: "googleId_UNIQUE") @db.MediumText
  paypalId                                                        String?                        @unique(length: 191, map: "paypalId_UNIQUE") @db.MediumText
  paypalName                                                      String?                        @db.MediumText
  paypalEmail                                                     String?                        @db.MediumText
  paypalCountry                                                   String?                        @db.MediumText
  epicId                                                          String?                        @db.MediumText
  steamId                                                         String?                        @unique(length: 191, map: "steamId_UNIQUE") @db.MediumText
  playstationId                                                   String?                        @db.MediumText
  battleTag                                                       String?                        @db.MediumText
  battlenetId                                                     String?                        @db.MediumText
  eaId                                                            String?                        @db.MediumText
  xboxId                                                          String?                        @db.MediumText
  originId                                                        String?                        @db.MediumText
  switchId                                                        String?                        @db.MediumText
  riotId                                                          String?                        @db.MediumText
  uplayId                                                         String?                        @db.MediumText
  freeFireId                                                      String?                        @db.MediumText
  apexLegendsIgn                                                  String?                        @db.MediumText
  followingCount                                                  Int
  followersCount                                                  Int
  biography                                                       String?                        @db.MediumText
  lastLoggedInAt                                                  DateTime?
  studentId                                                       String?                        @db.MediumText
  preferredPaymentType                                            String?                        @db.MediumText
  randomField                                                     String?                        @db.MediumText
  createdAt                                                       DateTime
  updatedAt                                                       DateTime
  notificationPreference                                          String?                        @db.Char(30)
  banner                                                          String?                        @db.Char(30)
  organisation                                                    String?                        @db.Char(30)
  referredBy                                                      String?                        @db.Char(30)
  logo                                                            String?                        @db.Char(30)
  discordUser                                                     String?                        @db.Char(30)
  avatar                                                          String?                        @db.Char(30)
  subscription                                                    String?                        @db.Char(30)
  address                                                         String?                        @db.Char(30)
  lead                                                            String?                        @db.Char(30)
  spinnerUser                                                     String?                        @db.Char(30)
  role                                                            String?                        @db.Char(30)
  NotificationPreference                                          NotificationPreference?        @relation(fields: [notificationPreference], references: [id], onUpdate: Restrict, map: "User_ibfk_1")
  Lead                                                            Lead?                          @relation(fields: [lead], references: [id], onUpdate: Restrict, map: "User_ibfk_10")
  SpinnerUser                                                     SpinnerUser?                   @relation(fields: [spinnerUser], references: [id], onUpdate: Restrict, map: "User_ibfk_11")
  Role                                                            Role?                          @relation(fields: [role], references: [id], onUpdate: Restrict, map: "User_ibfk_12")
  Media_MediaToUser_banner                                        Media?                         @relation("MediaToUser_banner", fields: [banner], references: [id], onUpdate: Restrict, map: "User_ibfk_2")
  Organisation_OrganisationToUser_organisation                    Organisation?                  @relation("OrganisationToUser_organisation", fields: [organisation], references: [id], onUpdate: Restrict, map: "User_ibfk_3")
  User                                                            User?                          @relation("UserToUser_referredBy", fields: [referredBy], references: [id], onUpdate: Restrict, map: "User_ibfk_4")
  Media_MediaToUser_logo                                          Media?                         @relation("MediaToUser_logo", fields: [logo], references: [id], onUpdate: Restrict, map: "User_ibfk_5")
  DiscordUser                                                     DiscordUser?                   @relation(fields: [discordUser], references: [id], onUpdate: Restrict, map: "User_ibfk_6")
  UserAvatar                                                      UserAvatar?                    @relation(fields: [avatar], references: [id], onUpdate: Restrict, map: "User_ibfk_7")
  VipSubscription                                                 VipSubscription?               @relation(fields: [subscription], references: [id], onUpdate: Restrict, map: "User_ibfk_8")
  Address                                                         Address?                       @relation(fields: [address], references: [id], onUpdate: Restrict, map: "User_ibfk_9")
  Analytics                                                       Analytics[]
  AnnouncementUser                                                AnnouncementUser[]
  Audience2                                                       Audience2[]
  AuditLog                                                        AuditLog[]
  BankAccount                                                     BankAccount[]
  CheckIn                                                         CheckIn[]
  CompetitionMatch_CompetitionMatch_forfeitWarningByToUser        CompetitionMatch[]             @relation("CompetitionMatch_forfeitWarningByToUser")
  CompetitionMatch_CompetitionMatch_forfeitedByToUser             CompetitionMatch[]             @relation("CompetitionMatch_forfeitedByToUser")
  CompetitionMatchTeam_CompetitionMatchTeam_acceptedByUserToUser  CompetitionMatchTeam[]         @relation("CompetitionMatchTeam_acceptedByUserToUser")
  CompetitionMatchTeam_CompetitionMatchTeam_submittedByUserToUser CompetitionMatchTeam[]         @relation("CompetitionMatchTeam_submittedByUserToUser")
  CompetitionSubmission_CompetitionSubmissionToUser               CompetitionSubmission[]
  CompetitionTeam_CompetitionTeamToUser                           CompetitionTeam[]
  Dispute                                                         Dispute[]
  DrawEntry                                                       DrawEntry[]
  DrawWinner                                                      DrawWinner[]
  Email                                                           Email[]
  GiveawayWinner                                                  GiveawayWinner[]
  LeaderboardUser                                                 LeaderboardUser[]
  MatchTeamPrediction                                             MatchTeamPrediction[]
  Message                                                         Message[]
  Notification                                                    Notification[]
  Organisation_Organisation_ownerToUser                           Organisation[]                 @relation("Organisation_ownerToUser")
  OrganisationInvite                                              OrganisationInvite[]
  OrganisationJoinRequest                                         OrganisationJoinRequest[]
  PaymentMethod                                                   PaymentMethod[]
  PlayerCompetitionRacingScore                                    PlayerCompetitionRacingScore[]
  PlayerCompetitionRoyaleScore                                    PlayerCompetitionRoyaleScore[]
  PopupLog                                                        PopupLog[]
  Recipient                                                       Recipient[]
  Schedule_Schedule_declinedByToUser                              Schedule[]                     @relation("Schedule_declinedByToUser")
  Schedule_Schedule_acceptedByToUser                              Schedule[]                     @relation("Schedule_acceptedByToUser")
  Schedule_Schedule_scheduledByUserToUser                         Schedule[]                     @relation("Schedule_scheduledByUserToUser")
  SocialShare                                                     SocialShare[]
  SpinnerTransaction                                              SpinnerTransaction[]
  Streamer_StreamerToUser                                         Streamer[]
  SurveyFulfillment                                               SurveyFulfillment[]
  Team_TeamToUser                                                 Team[]
  TeamInvite                                                      TeamInvite[]
  TeamJoinRequest                                                 TeamJoinRequest[]
  TeamPlayer                                                      TeamPlayer[]
  other_User                                                      User[]                         @relation("UserToUser_referredBy")
  UserInvite                                                      UserInvite[]
  UserMission                                                     UserMission[]
  UserSocialAccount                                               UserSocialAccount[]
  User_pageAccess                                                 User_pageAccess[]
  Vote                                                            Vote[]
  Wallet                                                          Wallet[]
  WalletTransaction_UserToWalletTransaction_user                  WalletTransaction[]            @relation("UserToWalletTransaction_user")
  WalletTransaction_UserToWalletTransaction_userRecipient         WalletTransaction[]            @relation("UserToWalletTransaction_userRecipient")
  WalletTransaction_UserToWalletTransaction_createdBy             WalletTransaction[]            @relation("UserToWalletTransaction_createdBy")
  WhatsApp                                                        WhatsApp[]
  WinnerForm_UserToWinnerForm                                     WinnerForm[]
  WithdrawForm                                                    WithdrawForm[]
  Audience                                                        Audience[]
  Award                                                           Award[]                        @relation("AwardUsers")
  Badge                                                           Badge[]                        @relation("BadgeUsers")
  Chat                                                            Chat[]                         @relation("ChatUsers")
  CompetitionSubmission_CompetitionSubmissionVotes                CompetitionSubmission[]        @relation("CompetitionSubmissionVotes")
  CompetitionTeam_CompetitionTeamRoster                           CompetitionTeam[]              @relation("CompetitionTeamRoster")
  User_B_FollowerUsers                                            User[]                         @relation("FollowerUsers")
  User_A_FollowerUsers                                            User[]                         @relation("FollowerUsers")
  User_B_FollowingUsers                                           User[]                         @relation("FollowingUsers")
  User_A_FollowingUsers                                           User[]                         @relation("FollowingUsers")
  Statistic_StatisticUser                                         Statistic[]                    @relation("StatisticUser")
  Streamer_StreamerVoters                                         Streamer[]                     @relation("StreamerVoters")
  ActivityEvent                                                   ActivityEvent[]                @relation("UserActivityEvents")
  Livery                                                          Livery[]                       @relation("UserLiveries")
  Statistic_UserStatistics                                        Statistic[]                    @relation("UserStatistics")
  Team_UserTeams                                                  Team[]                         @relation("UserTeams")
  WinnerForm_WinnerFormRoster                                     WinnerForm[]                   @relation("WinnerFormRoster")

  @@index([avatar], map: "avatar")
  @@index([banner], map: "banner")
  @@index([discordUser], map: "discordUser")
  @@index([lead], map: "lead")
  @@index([logo], map: "logo")
  @@index([notificationPreference], map: "notificationPreference")
  @@index([organisation], map: "organisation")
  @@index([referredBy], map: "referredBy")
  @@index([role], map: "role")
  @@index([spinnerUser], map: "spinnerUser")
  @@index([subscription], map: "subscription")
  @@index([address], map: "address")
}

model UserAvatar {
  id             String   @id @default(cuid()) @db.Char(30)
  skinColor      String?  @db.MediumText
  hairStyle      String?  @db.MediumText
  hairColor      String?  @db.MediumText
  fabricColor    String?  @db.MediumText
  eyes           String?  @db.MediumText
  eyebrows       String?  @db.MediumText
  mouth          String?  @db.MediumText
  facialHair     String?  @db.MediumText
  clothe         String?  @db.MediumText
  glasses        String?  @db.MediumText
  glassesOpacity Decimal?
  accesories     String?  @db.MediumText
  createdAt      DateTime
  updatedAt      DateTime
  User           User[]
}

model UserInvite {
  id           String        @id @default(cuid()) @db.Char(30)
  email        String        @db.MediumText
  token        String        @unique(length: 191, map: "token_UNIQUE") @db.MediumText
  createdAt    DateTime
  updatedAt    DateTime
  organisation String?       @db.Char(30)
  user         String?       @db.Char(30)
  Organisation Organisation? @relation(fields: [organisation], references: [id], onUpdate: Restrict, map: "UserInvite_ibfk_1")
  User         User?         @relation(fields: [user], references: [id], onUpdate: Restrict, map: "UserInvite_ibfk_2")

  @@index([organisation], map: "organisation")
  @@index([user], map: "user")
}

model UserMission {
  id             String     @id @default(cuid()) @db.Char(30)
  taskCount      Int
  taskCompletion Int
  isCompleted    Boolean
  createdAt      DateTime
  updatedAt      DateTime
  user           String?    @db.Char(30)
  mission        String?    @db.Char(30)
  User           User?      @relation(fields: [user], references: [id], onUpdate: Restrict, map: "UserMission_ibfk_1")
  Mission        Mission?   @relation(fields: [mission], references: [id], onUpdate: Restrict, map: "UserMission_ibfk_2")
  AuditLog       AuditLog[] @relation("UserMissonLogs")

  @@index([mission], map: "mission")
  @@index([user], map: "user")
}

model UserSocialAccount {
  id            String         @id @default(cuid()) @db.Char(30)
  accountId     String?        @db.MediumText
  accountName   String?        @db.MediumText
  accountUrl    String?        @db.MediumText
  createdAt     DateTime
  updatedAt     DateTime
  socialAccount String?        @db.Char(30)
  user          String?        @db.Char(30)
  SocialAccount SocialAccount? @relation(fields: [socialAccount], references: [id], onUpdate: Restrict, map: "UserSocialAccount_ibfk_1")
  User          User?          @relation(fields: [user], references: [id], onUpdate: Restrict, map: "UserSocialAccount_ibfk_2")

  @@index([socialAccount], map: "socialAccount")
  @@index([user], map: "user")
}

model User_pageAccess {
  nodeId   String @db.Char(30)
  position Int
  value    String @db.MediumText
  User     User   @relation(fields: [nodeId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "User_pageAccess_ibfk_1")

  @@id([nodeId, position])
  @@index([value(length: 191)], map: "value")
}

model VipSubscription {
  id                         String                       @id @default(cuid()) @db.Char(30)
  status                     String                       @db.MediumText
  description                String?                      @db.MediumText
  amount                     String                       @db.MediumText
  amountValidTill            DateTime?
  subscriptionValidTill      DateTime?
  lastPaid                   DateTime?
  subscriptionPaymentId      String?                      @db.MediumText
  failedPaymentAttempts      Int?
  createdAt                  DateTime
  updatedAt                  DateTime
  plan                       String?                      @db.Char(30)
  VipSubscriptionPlan        VipSubscriptionPlan?         @relation(fields: [plan], references: [id], onUpdate: Restrict, map: "VipSubscription_ibfk_1")
  User                       User[]
  VipSubscriptionTransaction VipSubscriptionTransaction[]

  @@index([plan], map: "plan")
}

model VipSubscriptionPlan {
  id              String            @id @default(cuid()) @db.Char(30)
  status          String            @db.MediumText
  name            String            @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  caption         String            @db.MediumText
  amount          String            @db.MediumText
  recurranceText  String            @db.MediumText
  recurrance      Int
  createdAt       DateTime
  updatedAt       DateTime
  planId          String            @unique(length: 191, map: "planId_UNIQUE") @db.MediumText
  VipSubscription VipSubscription[]
}

model VipSubscriptionTransaction {
  id                String           @id @default(cuid()) @db.Char(30)
  transactionId     String?          @db.MediumText
  registrationId    String?          @db.MediumText
  transactionNdc    String?          @db.MediumText
  transactionStatus String?          @db.MediumText
  paymentType       String?          @db.MediumText
  paymentBrand      String?          @db.MediumText
  amount            String           @db.MediumText
  currency          String?          @db.MediumText
  descriptor        String?          @db.MediumText
  recurringType     String?          @db.MediumText
  resultCode        String?          @db.MediumText
  resultDesc        String?          @db.MediumText
  riskScore         String?          @db.MediumText
  createdAt         DateTime
  updatedAt         DateTime
  paymentMethod     String?          @db.Char(30)
  subscription      String?          @db.Char(30)
  PaymentMethod     PaymentMethod?   @relation(fields: [paymentMethod], references: [id], onUpdate: Restrict, map: "VipSubscriptionTransaction_ibfk_1")
  VipSubscription   VipSubscription? @relation(fields: [subscription], references: [id], onUpdate: Restrict, map: "VipSubscriptionTransaction_ibfk_2")

  @@index([paymentMethod], map: "paymentMethod")
  @@index([subscription], map: "subscription")
}

model Vote {
  id        String   @id @default(cuid()) @db.Char(30)
  createdAt DateTime
  updatedAt DateTime
  voting    String?  @db.Char(30)
  user      String?  @db.Char(30)
  Voting    Voting?  @relation(fields: [voting], references: [id], onUpdate: Restrict, map: "Vote_ibfk_1")
  User      User?    @relation(fields: [user], references: [id], onUpdate: Restrict, map: "Vote_ibfk_2")

  @@index([user], map: "user")
  @@index([voting], map: "voting")
}

model Voting {
  id             String          @id @default(cuid()) @db.Char(30)
  caption        String?         @db.MediumText
  uploadedBy     String?         @db.MediumText
  createdAt      DateTime
  updatedAt      DateTime
  category       String?         @db.Char(30)
  media          String?         @db.Char(30)
  VotingCategory VotingCategory? @relation(fields: [category], references: [id], onUpdate: Restrict, map: "Voting_ibfk_1")
  Media          Media?          @relation(fields: [media], references: [id], onUpdate: Restrict, map: "Voting_ibfk_2")
  Vote           Vote[]

  @@index([category], map: "category")
  @@index([media], map: "media")
}

model VotingCategory {
  id        String   @id @default(cuid()) @db.Char(30)
  name      String   @db.MediumText
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime
  updatedAt DateTime
  Voting    Voting[]
}

model Wallet {
  id                String              @id @default(cuid()) @db.Char(30)
  type              String              @db.MediumText
  name              String              @db.MediumText
  total             String              @db.MediumText
  currency          String              @db.MediumText
  createdAt         DateTime
  updatedAt         DateTime
  organisation      String?             @db.Char(30)
  user              String?             @db.Char(30)
  team              String?             @db.Char(30)
  Organisation      Organisation?       @relation(fields: [organisation], references: [id], onUpdate: Restrict, map: "Wallet_ibfk_1")
  User              User?               @relation(fields: [user], references: [id], onUpdate: Restrict, map: "Wallet_ibfk_2")
  Team              Team?               @relation(fields: [team], references: [id], onUpdate: Restrict, map: "Wallet_ibfk_3")
  WalletTransaction WalletTransaction[]
  WithdrawForm      WithdrawForm[]

  @@index([organisation], map: "organisation")
  @@index([team], map: "team")
  @@index([user], map: "user")
}

model WalletTransaction {
  id                                                                 String        @id @default(cuid()) @db.Char(30)
  type                                                               String        @db.MediumText
  amount                                                             String        @db.MediumText
  currency                                                           String        @db.MediumText
  description                                                        String?       @db.MediumText
  createdAt                                                          DateTime
  updatedAt                                                          DateTime
  teamRecipient                                                      String?       @db.Char(30)
  user                                                               String?       @db.Char(30)
  team                                                               String?       @db.Char(30)
  wallet                                                             String?       @db.Char(30)
  organisation                                                       String?       @db.Char(30)
  userRecipient                                                      String?       @db.Char(30)
  organisationRecipient                                              String?       @db.Char(30)
  createdBy                                                          String?       @db.Char(30)
  Team_TeamToWalletTransaction_teamRecipient                         Team?         @relation("TeamToWalletTransaction_teamRecipient", fields: [teamRecipient], references: [id], onUpdate: Restrict, map: "WalletTransaction_ibfk_1")
  User_UserToWalletTransaction_user                                  User?         @relation("UserToWalletTransaction_user", fields: [user], references: [id], onUpdate: Restrict, map: "WalletTransaction_ibfk_2")
  Team_TeamToWalletTransaction_team                                  Team?         @relation("TeamToWalletTransaction_team", fields: [team], references: [id], onUpdate: Restrict, map: "WalletTransaction_ibfk_3")
  Wallet                                                             Wallet?       @relation(fields: [wallet], references: [id], onUpdate: Restrict, map: "WalletTransaction_ibfk_4")
  Organisation_OrganisationToWalletTransaction_organisation          Organisation? @relation("OrganisationToWalletTransaction_organisation", fields: [organisation], references: [id], onUpdate: Restrict, map: "WalletTransaction_ibfk_5")
  User_UserToWalletTransaction_userRecipient                         User?         @relation("UserToWalletTransaction_userRecipient", fields: [userRecipient], references: [id], onUpdate: Restrict, map: "WalletTransaction_ibfk_6")
  Organisation_OrganisationToWalletTransaction_organisationRecipient Organisation? @relation("OrganisationToWalletTransaction_organisationRecipient", fields: [organisationRecipient], references: [id], onUpdate: Restrict, map: "WalletTransaction_ibfk_7")
  User_UserToWalletTransaction_createdBy                             User?         @relation("UserToWalletTransaction_createdBy", fields: [createdBy], references: [id], onUpdate: Restrict, map: "WalletTransaction_ibfk_8")

  @@index([createdBy], map: "createdBy")
  @@index([organisation], map: "organisation")
  @@index([organisationRecipient], map: "organisationRecipient")
  @@index([team], map: "team")
  @@index([teamRecipient], map: "teamRecipient")
  @@index([user], map: "user")
  @@index([userRecipient], map: "userRecipient")
  @@index([wallet], map: "wallet")
}

model WebsiteSettings {
  id                    String                  @id @default(cuid()) @db.Char(30)
  name                  String                  @unique(length: 191, map: "name_UNIQUE") @db.MediumText
  defaultEventsOrder    String                  @db.MediumText
  defaultEventsLimit    Int
  createdAt             DateTime
  updatedAt             DateTime
  gameTile              String?                 @db.Char(30)
  GameTile              GameTile?               @relation(fields: [gameTile], references: [id], onUpdate: Restrict, map: "WebsiteSettings_ibfk_1")
  HomepageEvent         HomepageEvent[]
  AdvertisementCampaign AdvertisementCampaign[]

  @@index([gameTile], map: "gameTile")
}

model WhatsApp {
  id        String   @id @default(cuid()) @db.Char(30)
  status    String   @db.MediumText
  content   String   @db.MediumText
  errorCode Int?
  error     String?  @db.MediumText
  createdAt DateTime
  updatedAt DateTime
  user      String?  @db.Char(30)
  User      User?    @relation(fields: [user], references: [id], onUpdate: Restrict, map: "WhatsApp_ibfk_1")

  @@index([user], map: "user")
}

model WinnerForm {
  id                         String            @id @default(cuid()) @db.Char(30)
  status                     String            @db.MediumText
  declineReason              String?           @db.MediumText
  paymentType                String            @db.MediumText
  number                     Int?
  placement                  Int?
  prize                      Int?
  otherPrize                 String?           @db.MediumText
  winAt                      DateTime?
  requiresBankAccount        Boolean
  requiresAddress            Boolean
  requiresRosterConfirmation Boolean
  additionalOptions          String?           @db.MediumText
  submittedAt                DateTime?
  createdAt                  DateTime
  updatedAt                  DateTime
  batchPayment               String?           @db.Char(30)
  address                    String?           @db.Char(30)
  bankAccount                String?           @db.Char(30)
  client                     String?           @db.Char(30)
  user                       String?           @db.Char(30)
  team                       String?           @db.Char(30)
  eventStage                 String?           @db.Char(30)
  BatchPayment               BatchPayment?     @relation(fields: [batchPayment], references: [id], onUpdate: Restrict, map: "WinnerForm_ibfk_1")
  Address                    Address?          @relation(fields: [address], references: [id], onUpdate: Restrict, map: "WinnerForm_ibfk_2")
  BankAccount                BankAccount?      @relation(fields: [bankAccount], references: [id], onUpdate: Restrict, map: "WinnerForm_ibfk_3")
  Client                     Client?           @relation(fields: [client], references: [id], onUpdate: Restrict, map: "WinnerForm_ibfk_4")
  User_UserToWinnerForm      User?             @relation(fields: [user], references: [id], onUpdate: Restrict, map: "WinnerForm_ibfk_5")
  Team                       Team?             @relation(fields: [team], references: [id], onUpdate: Restrict, map: "WinnerForm_ibfk_6")
  CompetitionStage           CompetitionStage? @relation(fields: [eventStage], references: [id], onUpdate: Restrict, map: "WinnerForm_ibfk_7")
  AuditLog                   AuditLog[]
  SocialShare                SocialShare[]
  User_WinnerFormRoster      User[]            @relation("WinnerFormRoster")

  @@index([bankAccount], map: "bankAccount")
  @@index([batchPayment], map: "batchPayment")
  @@index([client], map: "client")
  @@index([eventStage], map: "eventStage")
  @@index([team], map: "team")
  @@index([user], map: "user")
  @@index([address], map: "address")
}

model WithdrawForm {
  id             String        @id @default(cuid()) @db.Char(30)
  status         String        @db.MediumText
  declineReason  String?       @db.MediumText
  paymentType    String        @db.MediumText
  number         Int?
  amount         String        @db.MediumText
  hasProofOfBank Boolean?
  bank           String?       @db.MediumText
  accountHolder  String?       @db.MediumText
  accountNumber  String?       @db.MediumText
  branch         String?       @db.MediumText
  branchNumber   String?       @db.MediumText
  swiftCode      String?       @db.MediumText
  paypalEmail    String?       @db.MediumText
  createdAt      DateTime
  updatedAt      DateTime
  batchPayment   String?       @db.Char(30)
  wallet         String?       @db.Char(30)
  proofOfBank    String?       @db.Char(30)
  user           String?       @db.Char(30)
  BatchPayment   BatchPayment? @relation(fields: [batchPayment], references: [id], onUpdate: Restrict, map: "WithdrawForm_ibfk_1")
  Wallet         Wallet?       @relation(fields: [wallet], references: [id], onUpdate: Restrict, map: "WithdrawForm_ibfk_2")
  Media          Media?        @relation(fields: [proofOfBank], references: [id], onUpdate: Restrict, map: "WithdrawForm_ibfk_3")
  User           User?         @relation(fields: [user], references: [id], onUpdate: Restrict, map: "WithdrawForm_ibfk_4")
  AuditLog       AuditLog[]

  @@index([batchPayment], map: "batchPayment")
  @@index([proofOfBank], map: "proofOfBank")
  @@index([user], map: "user")
  @@index([wallet], map: "wallet")
}
